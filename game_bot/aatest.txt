Compiling 1 file (.ex)
Generated game_bot app
Setting up event store schema and tables...
Cleaning up previous event store schema...
Event store setup complete!
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Starting required applications...
  ✓ Started phoenix
  ✓ Started phoenix_ecto
  ✓ Started postgrex
  ✓ Started ecto
  ✓ Started ecto_sql
  ✓ Started eventstore

Starting repositories...
  ✓ All repositories started successfully

Configuring SQL sandbox mode...
  ✓ Started and configured GameBot.Infrastructure.Persistence.Repo
  ✓ Started and configured GameBot.Infrastructure.Persistence.Repo.Postgres
  ✓ Started and configured GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres

Setting up event store schema and tables...
  ✓ Event store setup complete!

Cleaning up previous test data...
  ✗ Error when cleaning up data in GameBot.Infrastructure.Persistence.Repo: %CaseClauseError{term: :ok}
  ✗ Error when cleaning up data in GameBot.Infrastructure.Persistence.Repo.Postgres: %CaseClauseError{term: :ok}
  ✗ Error when cleaning up data in GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres: %CaseClauseError{term: :ok}

Test environment initialized with:
- Runtime repository implementation: "Not set"
- Testing repositories: [GameBot.Infrastructure.Persistence.Repo, GameBot.Infrastructure.Persistence.Repo.Postgres, GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres]
Running ExUnit with seed: 547094, max_cases: 1
Excluding tags: [:skip_db, :skip_in_ci]


GameBot.Domain.Events.GameEventsTest [test/game_bot/domain/events/game_events_test.exs]
  * test GuessProcessed serializes and deserializes correctly [L#200]  * test GuessProcessed serializes and deserializes correctly (14.7ms) [L#200]

  1) test GuessProcessed serializes and deserializes correctly (GameBot.Domain.Events.GameEventsTest)
     test/game_bot/domain/events/game_events_test.exs:200
     ** (KeyError) key :player1_id not found in: %GameBot.Domain.Events.TestEvents.TestEvent{
       game_id: "game-123",
       guild_id: "guild-123",
       mode: :two_player,
       timestamp: ~U[2025-03-14 08:52:00.847000Z],
       metadata: %{
         "correlation_id" => "corr-123",
         "guild_id" => "guild-123",
         "source_id" => "msg-123"
       },
       count: nil,
       score: nil,
       tags: MapSet.new([]),
       nested_data: nil,
       optional_field: nil,
       round_number: 1,
       teams: nil,
       team_ids: nil,
       player_ids: nil,
       player1_info: nil,
       player2_info: nil,
       player1_word: "word1",
       player2_word: "word2",
       guess_successful: true,
       match_score: 10,
       guess_count: 1,
       round_guess_count: 1,
       total_guesses: 1,
       guess_duration: 1000,
       config: nil,
       started_at: nil,
       roles: nil,
       team_id: "team1"
     }. Did you mean:

           * :player1_info
           * :player1_word
           * :player2_info
           * :player2_word
           * :player_ids

     code: assert reconstructed.player1_id == original.player1_id
     stacktrace:
       test/game_bot/domain/events/game_events_test.exs:210: (test)


GameBot.Infrastructure.Persistence.EventStore.SerializerValidationTest [test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs]
  * test serialize/2 with validation serializes valid events [L#11]  * test serialize/2 with validation serializes valid events (5.2ms) [L#11]

  2) test serialize/2 with validation serializes valid events (GameBot.Infrastructure.Persistence.EventStore.SerializerValidationTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:11
     match (=) failed
     code:  assert {:ok, serialized} = Serializer.serialize(event_map)
     left:  {:ok, serialized}
     right: {:error,
             %GameBot.Infrastructure.Persistence.Error{
               type: :validation,
               context: nil,
               message: nil,
               details: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:33: (test)


GameBot.Infrastructure.Persistence.EventStore.SimpleTest [test/game_bot/infrastructure/persistence/event_store/simple_test.exs]
  * test basic operations with EventStore [L#23]Testing append_to_stream with test-stream-5060
  * test basic operations with EventStore (116.5ms) [L#23]

  3) test basic operations with EventStore (GameBot.Infrastructure.Persistence.EventStore.SimpleTest)
     test/game_bot/infrastructure/persistence/event_store/simple_test.exs:23
     Failed to append to stream: %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}
     code: assert_append_and_read(EventStore, stream_id, event)
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/simple_test.exs:36: (test)


GameBot.Infrastructure.Persistence.EventStore.AdapterTest [test/game_bot/infrastructure/persistence/event_store/adapter_test.exs]
  * test adapter functions read_stream_forward/4 delegates to configured adapter [L#49]  * test adapter functions read_stream_forward/4 delegates to configured adapter (0.3ms) [L#49]

  4) test adapter functions read_stream_forward/4 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:49
     match (=) failed
     code:  assert {:ok, 2} =
              GameBot.Test.EventStoreCore.append_to_stream(
                :test_event_store_core,
                stream_id,
                :no_stream,
                events
              )
     left:  {:ok, 2}
     right: {:error,
             {:wrong_expected_version,
              [expected: :no_stream, current: 0]}}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:60: (test)

  * test adapter functions append_to_stream/4 delegates to configured adapter [L#35]  * test adapter functions append_to_stream/4 delegates to configured adapter (0.2ms) [L#35]

  5) test adapter functions append_to_stream/4 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:35
     match (=) failed
     code:  assert {:ok, 1} =
              GameBot.Test.EventStoreCore.append_to_stream(:test_event_store_core, stream_id, :no_stream, [
                event
              ])
     left:  {:ok, 1}
     right: {:error,
             {:wrong_expected_version,
              [expected: :no_stream, current: 0]}}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:43: (test)

  * test adapter functions stream_version/2 delegates to configured adapter [L#67]  * test adapter functions stream_version/2 delegates to configured adapter (1.1ms) [L#67]

  6) test adapter functions stream_version/2 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:67
     ** (UndefinedFunctionError) function GameBot.Test.EventStoreCore.stream_version/2 is undefined or private. Did you mean:

           * get_stream_version/1
           * get_stream_version/2
           * get_stream_version/3

     code: assert {:ok, 0} = Adapter.stream_version(stream_id)
     stacktrace:
       (game_bot 0.1.0) GameBot.Test.EventStoreCore.stream_version("test-stream-845", [])
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:75: (test)

  * test adapter functions delete_stream/3 delegates to configured adapter [L#84]  * test adapter functions delete_stream/3 delegates to configured adapter (0.2ms) [L#84]

  7) test adapter functions delete_stream/3 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:84
     ** (FunctionClauseError) no function clause matching in GenServer.whereis/1

     The following arguments were given to GenServer.whereis/1:

         # 1
         "test-stream-908"

     Attempted function clauses (showing 6 out of 6):

         def whereis(pid) when -is_pid(pid)-
         def whereis(name) when -is_atom(name)-
         def whereis(-{:global, name}-)
         def whereis(-{:via, mod, name}-)
         def whereis(-{name, local}-) when -is_atom(name)- and -local == node()-
         def whereis(-{name, node} = server-) when -is_atom(name)- and -is_atom(node)-

     code: assert {:ok, 1} = Adapter.append_to_stream(stream_id, :no_stream, [event])
     stacktrace:
       (elixir 1.18.2) lib/gen_server.ex:1286: GenServer.whereis/1
       (elixir 1.18.2) lib/gen_server.ex:1119: GenServer.call/3
       (game_bot 0.1.0) lib/game_bot/test/event_store_core.ex:419: GameBot.Test.EventStoreCore.get_operation_timeout/2
       (game_bot 0.1.0) lib/game_bot/test/event_store_core.ex:72: GameBot.Test.EventStoreCore.append_to_stream/4
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:92: (test)


GameBot.Infrastructure.Persistence.EventStore.MacroIntegrationTest [test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs]
  * test append and read stream operations work [L#50]  * test append and read stream operations work (117.2ms) [L#50]

  8) test append and read stream operations work (GameBot.Infrastructure.Persistence.EventStore.MacroIntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:50
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}}
     code: {:ok, version} = EventStore.append_to_stream(stream_id, :no_stream, [event], [timeout: @db_timeout])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:55: (test)

  * test stream_version returns correct version [L#65]  * test stream_version returns correct version (111.8ms) [L#65]

  9) test stream_version returns correct version (GameBot.Infrastructure.Persistence.EventStore.MacroIntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:65
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}}
     code: {:ok, new_version} = EventStore.append_to_stream(stream_id, :no_stream, [event], [timeout: @db_timeout])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:74: (test)

  * test delete_stream removes the stream [L#82]  * test delete_stream removes the stream (105.4ms) [L#82]

 10) test delete_stream removes the stream (GameBot.Infrastructure.Persistence.EventStore.MacroIntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:82
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}}
     code: {:ok, version} = EventStore.append_to_stream(stream_id, :no_stream, [event], [timeout: @db_timeout])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:87: (test)


GameBotWeb.PageControllerTest [test/game_bot_web/controllers/page_controller_test.exs]
  * test GET / [L#4]01:52:02.753 [warning] Event store is not running, cannot reset
  * test GET / (14.6ms) [L#4]

 11) test GET / (GameBotWeb.PageControllerTest)
     test/game_bot_web/controllers/page_controller_test.exs:4
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: the table identifier does not refer to an existing ETS table

     code: conn = get(conn, ~p"/")
     stacktrace:
       (stdlib 6.2) :ets.lookup(GameBotWeb.Endpoint, :secret_key_base)
       (game_bot 0.1.0) deps/phoenix/lib/phoenix/endpoint.ex:529: GameBotWeb.Endpoint.config/2
       (game_bot 0.1.0) lib/game_bot_web/endpoint.ex:1: GameBotWeb.Endpoint.call/2
       (phoenix 1.7.20) lib/phoenix/test/conn_test.ex:225: Phoenix.ConnTest.dispatch/5
       test/game_bot_web/controllers/page_controller_test.exs:5: (test)


GameBot.DiagnosticTest [test/diagnostic_test.exs]
  * test diagnostic: Repository initialization [L#78]  * test diagnostic: Repository initialization (0.1ms) [L#78]

 12) test diagnostic: Repository initialization (GameBot.DiagnosticTest)
     test/diagnostic_test.exs:78
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo because it was not started or it does not exist
     code: results = Enum.map(repos, fn repo ->
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       test/diagnostic_test.exs:89: anonymous fn/1 in GameBot.DiagnosticTest."test diagnostic: Repository initialization"/1
       (elixir 1.18.2) lib/enum.ex:1714: Enum."-map/2-lists^map/1-1-"/2
       test/diagnostic_test.exs:86: (test)


GameBot.Infrastructure.Persistence.Repo.MockTest [test/game_bot/infrastructure/persistence/repo/mock_test.exs]
  * test handles error from repository in transactions [L#65]01:52:02.911 [error] Error checking out connection for GameBot.Infrastructure.Persistence.Repo.Postgres: %DBConnection.ConnectionError{message: "tcp send: closed", severity: :error, reason: :error}
01:52:02.911 [error] Postgrex.Protocol (#PID<0.778.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
In test setup, checking configured repository implementation
Current repository implementation: nil
Setting up error transaction mock expectation
Before error transaction, implementation is: nil
Executing transaction that should fail
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Mock transaction was called for error case: false
Transaction error result: {:error, %GameBot.Infrastructure.Persistence.Error{type: :system, context: GameBot.Infrastructure.Persistence.Repo.Postgres, message: "Error in transaction: %DBConnection.OwnershipError{message: \"cannot find ownership process for #PID<0.991.0>.\\n\\nWhen using ownership, you must manage connections in one\\nof the four ways:\\n\\n* By explicitly checking out a connection\\n* By explicitly allowing a spawned process\\n* By running the pool in shared mode\\n* By using :caller option with allowed process\\n\\nThe first two options require every new process to explicitly\\ncheck a connection out or be allowed by calling checkout or\\nallow respectively.\\n\\nThe third option requires a {:shared, pid} mode to be set.\\nIf using shared mode in tests, make sure your tests are not\\nasync.\\n\\nThe fourth option requires [caller: pid] to be used when\\nchecking out a connection from the pool. The caller process\\nshould already be allowed on a connection.\\n\\nIf you are reading this error, it means you have not done one\\nof the steps above or that the owner process has crashed.\\n\"}", details: %DBConnection.OwnershipError{message: "cannot find ownership process for #PID<0.991.0>.\n\nWhen using ownership, you must manage connections in one\nof the four ways:\n\n* By explicitly checking out a connection\n* By explicitly allowing a spawned process\n* By running the pool in shared mode\n* By using :caller option with allowed process\n\nThe first two options require every new process to explicitly\ncheck a connection out or be allowed by calling checkout or\nallow respectively.\n\nThe third option requires a {:shared, pid} mode to be set.\nIf using shared mode in tests, make sure your tests are not\nasync.\n\nThe fourth option requires [caller: pid] to be used when\nchecking out a connection from the pool. The caller process\nshould already be allowed on a connection.\n\nIf you are reading this error, it means you have not done one\nof the steps above or that the owner process has crashed.\n"}}}
  * test handles error from repository in transactions (242.4ms) [L#65]

 13) test handles error from repository in transactions (GameBot.Infrastructure.Persistence.Repo.MockTest)
     test/game_bot/infrastructure/persistence/repo/mock_test.exs:65
     Assertion with == failed
     code:  assert result == {:error, :mock_error}
     left:  {:error,
             %GameBot.Infrastructure.Persistence.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.Repo.Postgres,
               message: "Error in transaction: %DBConnection.OwnershipError{message: \"cannot find ownership process for #PID<0.991.0>.\\n\\nWhen using ownership, you must manage connections in one\\nof the four ways:\\n\\n* By explicitly checking out a connection\\n* By explicitly allowing a spawned process\\n* By running the pool in shared mode\\n* By using :caller option with allowed process\\n\\nThe first two options require every new process to explicitly\\ncheck a connection out or be allowed by calling checkout or\\nallow respectively.\\n\\nThe third option requires a {:shared, pid} mode to be set.\\nIf using shared mode in tests, make sure your tests are not\\nasync.\\n\\nThe fourth option requires [caller: pid] to be used when\\nchecking out a connection from the pool. The caller process\\nshould already be allowed on a connection.\\n\\nIf you are reading this error, it means you have not done one\\nof the steps above or that the owner process has crashed.\\n\"}",
               details: %DBConnection.OwnershipError{
                 message: "cannot find ownership process for #PID<0.991.0>.\n\nWhen using ownership, you must manage connections in one\nof the four ways:\n\n* By explicitly checking out a connection\n* By explicitly allowing a spawned process\n* By running the pool in shared mode\n* By using :caller option with allowed process\n\nThe first two options require every new process to explicitly\ncheck a connection out or be allowed by calling checkout or\nallow respectively.\n\nThe third option requires a {:shared, pid} mode to be set.\nIf using shared mode in tests, make sure your tests are not\nasync.\n\nThe fourth option requires [caller: pid] to be used when\nchecking out a connection from the pool. The caller process\nshould already be allowed on a connection.\n\nIf you are reading this error, it means you have not done one\nof the steps above or that the owner process has crashed.\n"
               }
             }}
     right: {:error, :mock_error}
     stacktrace:
       test/game_bot/infrastructure/persistence/repo/mock_test.exs:98: (test)

  * test uses mock repository for transactions [L#27]01:52:03.003 [error] Error checking out connection for GameBot.Infrastructure.Persistence.Repo.Postgres: %DBConnection.ConnectionError{message: "tcp send: closed", severity: :error, reason: :error}
01:52:03.003 [error] Postgrex.Protocol (#PID<0.785.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
In test setup, checking configured repository implementation
Current repository implementation: nil
Setting up transaction mock expectation
Before transaction, implementation is: nil
Executing transaction through Postgres module
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Mock transaction was called: false
Transaction result: {:error, %GameBot.Infrastructure.Persistence.Error{type: :system, context: GameBot.Infrastructure.Persistence.Repo.Postgres, message: "Error in transaction: %DBConnection.OwnershipError{message: \"cannot find ownership process for #PID<0.999.0>.\\n\\nWhen using ownership, you must manage connections in one\\nof the four ways:\\n\\n* By explicitly checking out a connection\\n* By explicitly allowing a spawned process\\n* By running the pool in shared mode\\n* By using :caller option with allowed process\\n\\nThe first two options require every new process to explicitly\\ncheck a connection out or be allowed by calling checkout or\\nallow respectively.\\n\\nThe third option requires a {:shared, pid} mode to be set.\\nIf using shared mode in tests, make sure your tests are not\\nasync.\\n\\nThe fourth option requires [caller: pid] to be used when\\nchecking out a connection from the pool. The caller process\\nshould already be allowed on a connection.\\n\\nIf you are reading this error, it means you have not done one\\nof the steps above or that the owner process has crashed.\\n\"}", details: %DBConnection.OwnershipError{message: "cannot find ownership process for #PID<0.999.0>.\n\nWhen using ownership, you must manage connections in one\nof the four ways:\n\n* By explicitly checking out a connection\n* By explicitly allowing a spawned process\n* By running the pool in shared mode\n* By using :caller option with allowed process\n\nThe first two options require every new process to explicitly\ncheck a connection out or be allowed by calling checkout or\nallow respectively.\n\nThe third option requires a {:shared, pid} mode to be set.\nIf using shared mode in tests, make sure your tests are not\nasync.\n\nThe fourth option requires [caller: pid] to be used when\nchecking out a connection from the pool. The caller process\nshould already be allowed on a connection.\n\nIf you are reading this error, it means you have not done one\nof the steps above or that the owner process has crashed.\n"}}}
  * test uses mock repository for transactions (1.5ms) [L#27]

 14) test uses mock repository for transactions (GameBot.Infrastructure.Persistence.Repo.MockTest)
     test/game_bot/infrastructure/persistence/repo/mock_test.exs:27
     Assertion with == failed
     code:  assert result == {:ok, :transaction_result}
     left:  {:error,
             %GameBot.Infrastructure.Persistence.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.Repo.Postgres,
               message: "Error in transaction: %DBConnection.OwnershipError{message: \"cannot find ownership process for #PID<0.999.0>.\\n\\nWhen using ownership, you must manage connections in one\\nof the four ways:\\n\\n* By explicitly checking out a connection\\n* By explicitly allowing a spawned process\\n* By running the pool in shared mode\\n* By using :caller option with allowed process\\n\\nThe first two options require every new process to explicitly\\ncheck a connection out or be allowed by calling checkout or\\nallow respectively.\\n\\nThe third option requires a {:shared, pid} mode to be set.\\nIf using shared mode in tests, make sure your tests are not\\nasync.\\n\\nThe fourth option requires [caller: pid] to be used when\\nchecking out a connection from the pool. The caller process\\nshould already be allowed on a connection.\\n\\nIf you are reading this error, it means you have not done one\\nof the steps above or that the owner process has crashed.\\n\"}",
               details: %DBConnection.OwnershipError{
                 message: "cannot find ownership process for #PID<0.999.0>.\n\nWhen using ownership, you must manage connections in one\nof the four ways:\n\n* By explicitly checking out a connection\n* By explicitly allowing a spawned process\n* By running the pool in shared mode\n* By using :caller option with allowed process\n\nThe first two options require every new process to explicitly\ncheck a connection out or be allowed by calling checkout or\nallow respectively.\n\nThe third option requires a {:shared, pid} mode to be set.\nIf using shared mode in tests, make sure your tests are not\nasync.\n\nThe fourth option requires [caller: pid] to be used when\nchecking out a connection from the pool. The caller process\nshould already be allowed on a connection.\n\nIf you are reading this error, it means you have not done one\nof the steps above or that the owner process has crashed.\n"
               }
             }}
     right: {:ok, :transaction_result}
     stacktrace:
       test/game_bot/infrastructure/persistence/repo/mock_test.exs:60: (test)

  * test uses mock repository for insert operations [L#103]01:52:03.004 [error] Error checking out connection for GameBot.Infrastructure.Persistence.Repo.Postgres: %DBConnection.ConnectionError{message: "tcp send: closed", severity: :error, reason: :error}
01:52:03.004 [error] Postgrex.Protocol (#PID<0.781.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
In test setup, checking configured repository implementation
Current repository implementation: nil
Before insert, implementation is: nil
Executing insert through Postgres module
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Mock insert was called: false
Insert result: {:error, %GameBot.Infrastructure.Persistence.Error{type: :system, context: GameBot.Infrastructure.Persistence.Repo.Postgres, message: "Unexpected error: %DBConnection.OwnershipError{message: \"cannot find ownership process for #PID<0.1004.0>.\\n\\nWhen using ownership, you must manage connections in one\\nof the four ways:\\n\\n* By explicitly checking out a connection\\n* By explicitly allowing a spawned process\\n* By running the pool in shared mode\\n* By using :caller option with allowed process\\n\\nThe first two options require every new process to explicitly\\ncheck a connection out or be allowed by calling checkout or\\nallow respectively.\\n\\nThe third option requires a {:shared, pid} mode to be set.\\nIf using shared mode in tests, make sure your tests are not\\nasync.\\n\\nThe fourth option requires [caller: pid] to be used when\\nchecking out a connection from the pool. The caller process\\nshould already be allowed on a connection.\\n\\nIf you are reading this error, it means you have not done one\\nof the steps above or that the owner process has crashed.\\n\\nSee Ecto.Adapters.SQL.Sandbox docs for more information.\"}", details: nil}}
  * test uses mock repository for insert operations (1.1ms) [L#103]

 15) test uses mock repository for insert operations (GameBot.Infrastructure.Persistence.Repo.MockTest)
     test/game_bot/infrastructure/persistence/repo/mock_test.exs:103
     match (=) failed
     code:  assert {:ok, %{id: 1}} = result
     left:  {:ok, %{id: 1}}
     right: {:error,
             %GameBot.Infrastructure.Persistence.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.Repo.Postgres,
               message: "Unexpected error: %DBConnection.OwnershipError{message: \"cannot find ownership process for #PID<0.1004.0>.\\n\\nWhen using ownership, you must manage connections in one\\nof the four ways:\\n\\n* By explicitly checking out a connection\\n* By explicitly allowing a spawned process\\n* By running the pool in shared mode\\n* By using :caller option with allowed process\\n\\nThe first two options require every new process to explicitly\\ncheck a connection out or be allowed by calling checkout or\\nallow respectively.\\n\\nThe third option requires a {:shared, pid} mode to be set.\\nIf using shared mode in tests, make sure your tests are not\\nasync.\\n\\nThe fourth option requires [caller: pid] to be used when\\nchecking out a connection from the pool. The caller process\\nshould already be allowed on a connection.\\n\\nIf you are reading this error, it means you have not done one\\nof the steps above or that the owner process has crashed.\\n\\nSee Ecto.Adapters.SQL.Sandbox docs for more information.\"}",
               details: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/repo/mock_test.exs:132: (test)


GameBot.Test.DatabaseManagerTest [test/game_bot/test/database_manager_test.exs]
  * test sync tests event store operations [L#25]01:52:03.967 [error] Postgrex.Protocol (#PID<0.782.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
01:52:03.967 [error] Postgrex.Protocol (#PID<0.777.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
01:52:03.967 [error] Postgrex.Protocol (#PID<0.783.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
01:52:03.967 [error] Postgrex.Protocol (#PID<0.776.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
01:52:03.967 [error] Postgrex.Protocol (#PID<0.779.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
01:52:03.967 [error] Postgrex.Protocol (#PID<0.784.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
  * test sync tests event store operations (1017.5ms) [L#25]

 16) test sync tests event store operations (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:25
     ** (RuntimeError) could not lookup GameBot.Infrastructure.Persistence.EventStore because it was not started or it does not exist
     code: assert {:ok, _} = EventStore.append_to_stream(stream_id, :any_version, [event])
     stacktrace:
       (eventstore 1.4.8) lib/event_store/config/store.ex:65: EventStore.Config.Store.lookup/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.parse_opts/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.append_to_stream/4
       test/game_bot/test/database_manager_test.exs:29: (test)

  * test error handling handles event store errors [L#165]  * test error handling handles event store errors (530.7ms) [L#165]

 17) test error handling handles event store errors (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:165
     ** (RuntimeError) could not lookup GameBot.Infrastructure.Persistence.EventStore because it was not started or it does not exist
     code: EventStore.read_stream_forward("nonexistent-stream")
     stacktrace:
       (eventstore 1.4.8) lib/event_store/config/store.ex:65: EventStore.Config.Store.lookup/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.parse_opts/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.read_stream_forward/4
       test/game_bot/test/database_manager_test.exs:168: (test)

  * test error handling handles transaction failures [L#159]  * test error handling handles transaction failures (0.1ms) [L#159]

 18) test error handling handles transaction failures (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:159
     ** (exit) exited in: GenServer.call(#PID<0.1044.0>, {:checkout, [post_checkout: #Function<0.14963859/2 in Ecto.Adapters.SQL.Sandbox.checkout/2>, pre_checkin: #Function<1.14963859/3 in Ecto.Adapters.SQL.Sandbox.checkout/2>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo, timeout: 15000, pool_size: 10, queue_target: 200, queue_interval: 1000, ownership_timeout: 30000]}, :infinity)
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (elixir 1.18.2) lib/gen_server.ex:1128: GenServer.call/3
       (db_connection 2.7.0) lib/db_connection/ownership.ex:103: DBConnection.Ownership.ownership_checkout/2
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:551: Ecto.Adapters.SQL.Sandbox.checkout/2
       (game_bot 0.1.0) lib/game_bot/test/database_manager.ex:502: GameBot.Test.DatabaseManager.configure_sandbox_mode/3
       (elixir 1.18.2) lib/enum.ex:987: Enum."-each/2-lists^foreach/1-0-"/2
       (game_bot 0.1.0) lib/game_bot/test/database_manager.ex:302: GameBot.Test.DatabaseManager.do_setup_sandbox/1
       test/game_bot/test/database_manager_test.exs:149: GameBot.Test.DatabaseManagerTest.__ex_unit_setup_5_0/1
       GameBot.Test.DatabaseManagerTest.__ex_unit_describe_5/1

  * test sync tests handles database errors gracefully [L#34]  * test sync tests handles database errors gracefully (568.7ms) [L#34]

 19) test sync tests handles database errors gracefully (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:34
     ** (Postgrex.Error) ERROR 42883 (undefined_function) function invalid_function() does not exist

         query: SELECT invalid_function()

         hint: No function matches the given name and argument types. You might need to add explicit type casts.
     code: assert {:error, _} = Repo.transaction(fn ->
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1096: Ecto.Adapters.SQL.raise_sql_call_error/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1400: anonymous fn/3 in Ecto.Adapters.SQL.checkout_or_transaction/4
       (db_connection 2.7.0) lib/db_connection.ex:1756: DBConnection.run_transaction/4
       test/game_bot/test/database_manager_test.exs:35: (test)

  * test async tests concurrent event store operations [L#54]  * test async tests concurrent event store operations (746.8ms) [L#54]

 20) test async tests concurrent event store operations (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:54
     ** (RuntimeError) could not lookup GameBot.Infrastructure.Persistence.EventStore because it was not started or it does not exist
     code: assert {:ok, _} = EventStore.append_to_stream(stream_id, :any_version, [event])
     stacktrace:
       (eventstore 1.4.8) lib/event_store/config/store.ex:65: EventStore.Config.Store.lookup/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.parse_opts/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.append_to_stream/4
       test/game_bot/test/database_manager_test.exs:58: (test)


GameBot.Replay.StorageTest [test/game_bot/replay/storage_test.exs]
  * test list_replays/1 lists replays with filters [L#243]  * test list_replays/1 lists replays with filters (210.5ms) [L#243]

 21) test list_replays/1 lists replays with filters (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:243
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not a list

     code: assert length(list) == 1
     stacktrace:
       :erlang.length({:ok, []})
       test/game_bot/replay/storage_test.exs:264: (test)

  * test cleanup_old_replays/1 deletes old replays [L#331]  * test cleanup_old_replays/1 deletes old replays (3.9ms) [L#331]

 22) test cleanup_old_replays/1 deletes old replays (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:331
     Assertion with == failed
     code:  assert count == 5
     left:  {:ok, 0}
     right: 5
     stacktrace:
       test/game_bot/replay/storage_test.exs:347: (test)

  * test store_replay/1 handles insert errors [L#82]01:52:06.502 [error] [No Guild] Database operation failed after retries or non-recoverable: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: "1988", message: "null value in column \"guild_id\" of relation \"game_replays\" violates not-null constraint", table: "game_replays", file: "execMain.c", unknown: "ERROR", column: "guild_id", severity: "ERROR", schema: "public", routine: "ExecConstraints", detail: "Failing row contains (a5aef0c4-df72-4e08-8919-2c5b3e2ffdc5, test-game-649, test-replay-123, two_player, null, 2025-03-14 07:52:06.5, 2025-03-14 08:52:06.5, 42, {\"rounds\": 10, \"team_count\": 2, \"player_count\": 2, \"total_guesse..., {\"team_scores\": {\"team1\": 30, \"team2\": 20}, \"winning_team\": \"tea..., {\"game_started\": 1, \"game_completed\": 1}, 2025-03-14 08:52:06.5, 2025-03-14 08:52:06, 2025-03-14 08:52:06).", pg_code: "23502"}, connection_id: 41776, query: nil}
01:52:06.502 [warning] [No Guild] Transaction failed: %GameBot.Infrastructure.Persistence.Error{type: :system, context: GameBot.Infrastructure.Persistence.Repo.Transaction, message: "Database error: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: \"1988\", message: \"null value in column \\\"guild_id\\\" of relation \\\"game_replays\\\" violates not-null constraint\", table: \"game_replays\", file: \"execMain.c\", unknown: \"ERROR\", column: \"guild_id\", severity: \"ERROR\", schema: \"public\", routine: \"ExecConstraints\", detail: \"Failing row contains (a5aef0c4-df72-4e08-8919-2c5b3e2ffdc5, test-game-649, test-replay-123, two_player, null, 2025-03-14 07:52:06.5, 2025-03-14 08:52:06.5, 42, {\\\"rounds\\\": 10, \\\"team_count\\\": 2, \\\"player_count\\\": 2, \\\"total_guesse..., {\\\"team_scores\\\": {\\\"team1\\\": 30, \\\"team2\\\": 20}, \\\"winning_team\\\": \\\"tea..., {\\\"game_started\\\": 1, \\\"game_completed\\\": 1}, 2025-03-14 08:52:06.5, 2025-03-14 08:52:06, 2025-03-14 08:52:06).\", pg_code: \"23502\"}, connection_id: 41776, query: nil}", details: nil}
  * test store_replay/1 handles insert errors (2.9ms) [L#82]

 23) test store_replay/1 handles insert errors (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:82
     match (=) failed
     code:  assert {:error, %Ecto.Changeset{} = error_changeset} = result
     left:  {:error, %Ecto.Changeset{} = error_changeset}
     right: {:error,
             %GameBot.Infrastructure.Persistence.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.Repo.Transaction,
               message: "Database error: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: \"1988\", message: \"null value in column \\\"guild_id\\\" of relation \\\"game_replays\\\" violates not-null constraint\", table: \"game_replays\", file: \"execMain.c\", unknown: \"ERROR\", column: \"guild_id\", severity: \"ERROR\", schema: \"public\", routine: \"ExecConstraints\", detail: \"Failing row contains (a5aef0c4-df72-4e08-8919-2c5b3e2ffdc5, test-game-649, test-replay-123, two_player, null, 2025-03-14 07:52:06.5, 2025-03-14 08:52:06.5, 42, {\\\"rounds\\\": 10, \\\"team_count\\\": 2, \\\"player_count\\\": 2, \\\"total_guesse..., {\\\"team_scores\\\": {\\\"team1\\\": 30, \\\"team2\\\": 20}, \\\"winning_team\\\": \\\"tea..., {\\\"game_started\\\": 1, \\\"game_completed\\\": 1}, 2025-03-14 08:52:06.5, 2025-03-14 08:52:06, 2025-03-14 08:52:06).\", pg_code: \"23502\"}, connection_id: 41776, query: nil}",
               details: nil
             }}
     stacktrace:
       test/game_bot/replay/storage_test.exs:97: (test)

  * test get_replay/2 handles event loading errors [L#177]  * test get_replay/2 handles event loading errors (44.3ms) [L#177]

 24) test get_replay/2 handles event loading errors (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:177
     Assertion with == failed
     code:  assert result == {:error, :stream_not_found}
     left:  {:error, :replay_not_found}
     right: {:error, :stream_not_found}
     stacktrace:
       test/game_bot/replay/storage_test.exs:196: (test)

  * test store_replay/1 stores a replay successfully [L#63]01:52:06.556 [error] [No Guild] Database operation failed after retries or non-recoverable: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: "1988", message: "null value in column \"guild_id\" of relation \"game_replays\" violates not-null constraint", table: "game_replays", file: "execMain.c", unknown: "ERROR", column: "guild_id", severity: "ERROR", schema: "public", routine: "ExecConstraints", detail: "Failing row contains (95e2447a-4991-48e5-983f-d52e40af095c, test-game-963, test-replay-123, two_player, null, 2025-03-14 07:52:06.554, 2025-03-14 08:52:06.554, 42, {\"rounds\": 10, \"team_count\": 2, \"player_count\": 2, \"total_guesse..., {\"team_scores\": {\"team1\": 30, \"team2\": 20}, \"winning_team\": \"tea..., {\"game_started\": 1, \"game_completed\": 1}, 2025-03-14 08:52:06.554, 2025-03-14 08:52:06, 2025-03-14 08:52:06).", pg_code: "23502"}, connection_id: 42744, query: nil}
01:52:06.556 [warning] [No Guild] Transaction failed: %GameBot.Infrastructure.Persistence.Error{type: :system, context: GameBot.Infrastructure.Persistence.Repo.Transaction, message: "Database error: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: \"1988\", message: \"null value in column \\\"guild_id\\\" of relation \\\"game_replays\\\" violates not-null constraint\", table: \"game_replays\", file: \"execMain.c\", unknown: \"ERROR\", column: \"guild_id\", severity: \"ERROR\", schema: \"public\", routine: \"ExecConstraints\", detail: \"Failing row contains (95e2447a-4991-48e5-983f-d52e40af095c, test-game-963, test-replay-123, two_player, null, 2025-03-14 07:52:06.554, 2025-03-14 08:52:06.554, 42, {\\\"rounds\\\": 10, \\\"team_count\\\": 2, \\\"player_count\\\": 2, \\\"total_guesse..., {\\\"team_scores\\\": {\\\"team1\\\": 30, \\\"team2\\\": 20}, \\\"winning_team\\\": \\\"tea..., {\\\"game_started\\\": 1, \\\"game_completed\\\": 1}, 2025-03-14 08:52:06.554, 2025-03-14 08:52:06, 2025-03-14 08:52:06).\", pg_code: \"23502\"}, connection_id: 42744, query: nil}", details: nil}
  * test store_replay/1 stores a replay successfully (2.9ms) [L#63]

 25) test store_replay/1 stores a replay successfully (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:63
     match (=) failed
     code:  assert {:ok, stored_replay} = result
     left:  {:ok, stored_replay}
     right: {:error,
             %GameBot.Infrastructure.Persistence.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.Repo.Transaction,
               message: "Database error: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: \"1988\", message: \"null value in column \\\"guild_id\\\" of relation \\\"game_replays\\\" violates not-null constraint\", table: \"game_replays\", file: \"execMain.c\", unknown: \"ERROR\", column: \"guild_id\", severity: \"ERROR\", schema: \"public\", routine: \"ExecConstraints\", detail: \"Failing row contains (95e2447a-4991-48e5-983f-d52e40af095c, test-game-963, test-replay-123, two_player, null, 2025-03-14 07:52:06.554, 2025-03-14 08:52:06.554, 42, {\\\"rounds\\\": 10, \\\"team_count\\\": 2, \\\"player_count\\\": 2, \\\"total_guesse..., {\\\"team_scores\\\": {\\\"team1\\\": 30, \\\"team2\\\": 20}, \\\"winning_team\\\": \\\"tea..., {\\\"game_started\\\": 1, \\\"game_completed\\\": 1}, 2025-03-14 08:52:06.554, 2025-03-14 08:52:06, 2025-03-14 08:52:06).\", pg_code: \"23502\"}, connection_id: 42744, query: nil}",
               details: nil
             }}
     stacktrace:
       test/game_bot/replay/storage_test.exs:75: (test)

  * test log_access/6 returns error on failed insert [L#310]01:52:06.559 [error] Failed to log replay access: [guild_id: {"must be a valid Discord guild ID", [validation: :format]}, user_id: {"must be a valid Discord user ID", [validation: :format]}]
  * test log_access/6 returns error on failed insert (3.2ms) [L#310]

 26) test log_access/6 returns error on failed insert (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:310
     Assertion with == failed
     code:  assert changeset.errors == [user_id: {"is invalid", []}]
     left:  [
              guild_id: {"must be a valid Discord guild ID",
               [validation: :format]},
              user_id: {"must be a valid Discord user ID",
               [validation: :format]}
            ]
     right: [user_id: {"is invalid", []}]
     stacktrace:
       test/game_bot/replay/storage_test.exs:325: (test)

  * test cleanup_old_replays/1 handles delete errors [L#351]  * test cleanup_old_replays/1 handles delete errors (4.3ms) [L#351]

 27) test cleanup_old_replays/1 handles delete errors (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:351
     match (=) failed
     code:  assert {:error, "database error"} = result
     left:  {:error, "database error"}
     right: {:ok, {:ok, 0}}
     stacktrace:
       test/game_bot/replay/storage_test.exs:366: (test)

  * test list_replays/1 lists replays with default params [L#219]  * test list_replays/1 lists replays with default params (3.8ms) [L#219]

 28) test list_replays/1 lists replays with default params (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:219
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not a list

     code: assert length(list) == 2
     stacktrace:
       :erlang.length({:ok, []})
       test/game_bot/replay/storage_test.exs:239: (test)

  * test list_replays/1 returns empty list when no replays match filters [L#269]  * test list_replays/1 returns empty list when no replays match filters (4.3ms) [L#269]

 29) test list_replays/1 returns empty list when no replays match filters (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:269
     Assertion with == failed
     code:  assert list == []
     left:  {:ok, []}
     right: []
     stacktrace:
       test/game_bot/replay/storage_test.exs:283: (test)

  * test get_replay/2 retrieves a replay with events [L#138]01:52:06.573 [error] Error checking out connection for GameBot.Infrastructure.Persistence.Repo.Postgres: %DBConnection.ConnectionError{message: "tcp send: closed", severity: :error, reason: :error}
01:52:06.573 [error] Postgrex.Protocol (#PID<0.780.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
  * test get_replay/2 retrieves a replay with events (49.0ms) [L#138]

 30) test get_replay/2 retrieves a replay with events (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:138
     ** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.1222.0>.

     When using ownership, you must manage connections in one
     of the four ways:

     * By explicitly checking out a connection
     * By explicitly allowing a spawned process
     * By running the pool in shared mode
     * By using :caller option with allowed process

     The first two options require every new process to explicitly
     check a connection out or be allowed by calling checkout or
     allow respectively.

     The third option requires a {:shared, pid} mode to be set.
     If using shared mode in tests, make sure your tests are not
     async.

     The fourth option requires [caller: pid] to be used when
     checking out a connection from the pool. The caller process
     should already be allowed on a connection.

     If you are reading this error, it means you have not done one
     of the steps above or that the owner process has crashed.

     See Ecto.Adapters.SQL.Sandbox docs for more information.
     code: result = Storage.get_replay(replay_id, load_events: true)
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1093: Ecto.Adapters.SQL.raise_sql_call_error/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:994: Ecto.Adapters.SQL.execute/6
       (ecto 3.12.5) lib/ecto/repo/queryable.ex:232: Ecto.Repo.Queryable.execute/4
       (ecto 3.12.5) lib/ecto/repo/queryable.ex:19: Ecto.Repo.Queryable.all/3
       (ecto 3.12.5) lib/ecto/repo/queryable.ex:154: Ecto.Repo.Queryable.one/3
       (game_bot 0.1.0) lib/game_bot/replay/storage.ex:204: GameBot.Replay.Storage.do_get_replay/1
       (game_bot 0.1.0) lib/game_bot/replay/storage.ex:70: GameBot.Replay.Storage.get_replay/2
       test/game_bot/replay/storage_test.exs:154: (test)


GameBot.Infrastructure.Persistence.EventStore.SerializerTest [test/game_bot/infrastructure/persistence/event_store/serializer_test.exs]
  * test Serializer handles missing type or version fields [L#202]  * test Serializer handles missing type or version fields (0.1ms) [L#202]

 31) test Serializer handles missing type or version fields (GameBot.Infrastructure.Persistence.EventStore.SerializerTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:202
     Assertion with == failed
     code:  assert serialized["type"] == "test_event"
     left:  nil
     right: "test_event"
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:216: (test)

  * test Serializer serializes and deserializes TestEvent correctly [L#148]  * test Serializer serializes and deserializes TestEvent correctly (0.1ms) [L#148]

 32) test Serializer serializes and deserializes TestEvent correctly (GameBot.Infrastructure.Persistence.EventStore.SerializerTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:148
     Assertion with == failed
     code:  assert serialized["type"] == "test_event"
     left:  nil
     right: "test_event"
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:164: (test)

  * test serialize/1 successfully serializes valid event [L#50]  * test serialize/1 successfully serializes valid event (0.1ms) [L#50]

 33) test serialize/1 successfully serializes valid event (GameBot.Infrastructure.Persistence.EventStore.SerializerTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:50
     Assertion with == failed
     code:  assert serialized["type"] == "test_event"
     left:  nil
     right: "test_event"
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:63: (test)

  * test deserialize/1 successfully deserializes valid event data [L#76]  * test deserialize/1 successfully deserializes valid event data (4.5ms) [L#76]

 34) test deserialize/1 successfully deserializes valid event data (GameBot.Infrastructure.Persistence.EventStore.SerializerTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:76
     Assertion with == failed
     code:  assert deserialized["type"] == "test_event"
     left:  nil
     right: "test_event"
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:90: (test)


GameBot.Infrastructure.Persistence.Repo.PostgresTest [test/game_bot/infrastructure/persistence/repo/postgres_test.exs]
  * test delete_record/2 handles concurrent deletions [L#122]Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
  * test delete_record/2 handles concurrent deletions (185.3ms) [L#122]

 35) test delete_record/2 handles concurrent deletions (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:122
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1275.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, timeout: 15000, pool_size: 10, queue_target: 200, queue_interval: 1000])
         ** (EXIT) shutdown: "owner #PID<0.1273.0> exited"
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection/holder.ex:78: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

  * test update_record/2 handles concurrent modifications [L#105]Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
  * test update_record/2 handles concurrent modifications (12.3ms) [L#105]

 36) test update_record/2 handles concurrent modifications (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:105
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1280.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, timeout: 15000, pool_size: 10, queue_target: 200, queue_interval: 1000])
         ** (EXIT) shutdown: "owner #PID<0.1278.0> exited"
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection/holder.ex:78: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

  * test execute_transaction/1 rolls back on error [L#53]Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
  * test execute_transaction/1 rolls back on error (12.2ms) [L#53]

 37) test execute_transaction/1 rolls back on error (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:53
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1285.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, timeout: 15000, pool_size: 10, queue_target: 200, queue_interval: 1000])
         ** (EXIT) shutdown: "owner #PID<0.1283.0> exited"
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection/holder.ex:78: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

  * test update_record/2 successfully updates record [L#96]Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
  * test update_record/2 successfully updates record (11.3ms) [L#96]

 38) test update_record/2 successfully updates record (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:96
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1290.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, timeout: 15000, pool_size: 10, queue_target: 200, queue_interval: 1000])
         ** (EXIT) shutdown: "owner #PID<0.1288.0> exited"
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection/holder.ex:78: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

  * test execute_transaction/1 successfully executes transaction [L#44]Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
  * test execute_transaction/1 successfully executes transaction (10.8ms) [L#44]

 39) test execute_transaction/1 successfully executes transaction (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:44
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1295.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, timeout: 15000, pool_size: 10, queue_target: 200, queue_interval: 1000])
         ** (EXIT) shutdown: "owner #PID<0.1293.0> exited"
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection/holder.ex:78: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

  * test delete_record/2 successfully deletes record [L#116]Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
  * test delete_record/2 successfully deletes record (11.3ms) [L#116]

 40) test delete_record/2 successfully deletes record (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:116
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1300.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, timeout: 15000, pool_size: 10, queue_target: 200, queue_interval: 1000])
         ** (EXIT) shutdown: "owner #PID<0.1298.0> exited"
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection/holder.ex:78: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

  * test execute_transaction/1 handles nested transactions [L#64]Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
  * test execute_transaction/1 handles nested transactions (10.6ms) [L#64]

 41) test execute_transaction/1 handles nested transactions (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:64
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1305.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, timeout: 15000, pool_size: 10, queue_target: 200, queue_interval: 1000])
         ** (EXIT) shutdown: "owner #PID<0.1303.0> exited"
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection/holder.ex:78: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

  * test insert_record/2 handles validation errors [L#83]  * test insert_record/2 handles validation errors (8.0ms) [L#83]

 42) test insert_record/2 handles validation errors (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:83
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1310.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, timeout: 15000, pool_size: 10, queue_target: 200, queue_interval: 1000])
         ** (EXIT) shutdown: "owner #PID<0.1308.0> exited"
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection/holder.ex:78: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

  * test insert_record/2 handles constraint violations [L#88]Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
  * test insert_record/2 handles constraint violations (10.9ms) [L#88]

 43) test insert_record/2 handles constraint violations (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:88
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1315.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, timeout: 15000, pool_size: 10, queue_target: 200, queue_interval: 1000])
         ** (EXIT) shutdown: "owner #PID<0.1313.0> exited"
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection/holder.ex:78: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

  * test insert_record/2 successfully inserts valid record [L#77]Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
  * test insert_record/2 successfully inserts valid record (10.1ms) [L#77]

 44) test insert_record/2 successfully inserts valid record (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:77
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1320.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, timeout: 15000, pool_size: 10, queue_target: 200, queue_interval: 1000])
         ** (EXIT) shutdown: "owner #PID<0.1318.0> exited"
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection/holder.ex:78: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0


GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest [test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs]
  * test subscribe_to_stream/4 supports subscription options [L#176]  * test subscribe_to_stream/4 supports subscription options (10.4ms) [L#176]

 45) test subscribe_to_stream/4 supports subscription options (GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:176
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}}
     code: {:ok, _} = Postgres.append_to_stream(stream_id, :no_stream, [create_test_event_local(stream_id)])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:178: (test)

  * test delete_stream/3 handles optimistic concurrency on delete [L#214]  * test delete_stream/3 handles optimistic concurrency on delete (9.0ms) [L#214]

 46) test delete_stream/3 handles optimistic concurrency on delete (GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:214
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}}
     code: {:ok, _} = Postgres.append_to_stream(stream_id, :no_stream, [event])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:217: (test)

  * test subscribe_to_stream/4 successfully subscribes to a stream [L#161]  * test subscribe_to_stream/4 successfully subscribes to a stream (10.0ms) [L#161]

 47) test subscribe_to_stream/4 successfully subscribes to a stream (GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:161
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}}
     code: {:ok, _} = Postgres.append_to_stream(stream_id, :no_stream, [create_test_event_local(stream_id)])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:164: (test)

  * test append_to_stream/4 successfully appends multiple events [L#104]  * test append_to_stream/4 successfully appends multiple events (10.1ms) [L#104]

 48) test append_to_stream/4 successfully appends multiple events (GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:104
     match (=) failed
     code:  assert {:ok, 2} = Postgres.append_to_stream(stream_id, :no_stream, events)
     left:  {:ok, 2}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres,
               message: "Unexpected error",
               details: %GameBot.Infrastructure.Persistence.Error{
                 type: :validation,
                 context: nil,
                 message: nil,
                 details: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:110: (test)

  * test append_to_stream/4 successfully appends events to a new stream [L#98]  * test append_to_stream/4 successfully appends events to a new stream (9.5ms) [L#98]

 49) test append_to_stream/4 successfully appends events to a new stream (GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:98
     match (=) failed
     code:  assert {:ok, 1} = Postgres.append_to_stream(stream_id, :no_stream, [event])
     left:  {:ok, 1}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres,
               message: "Unexpected error",
               details: %GameBot.Infrastructure.Persistence.Error{
                 type: :validation,
                 context: nil,
                 message: nil,
                 details: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:101: (test)

  * test delete_stream/3 successfully deletes a stream [L#200]  * test delete_stream/3 successfully deletes a stream (8.4ms) [L#200]

 50) test delete_stream/3 successfully deletes a stream (GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:200
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}}
     code: {:ok, version} = Postgres.append_to_stream(stream_id, :no_stream, [event])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:204: (test)

  * test stream_version/2 returns current version for existing stream [L#191]  * test stream_version/2 returns current version for existing stream (7.7ms) [L#191]

 51) test stream_version/2 returns current version for existing stream (GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:191
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}}
     code: {:ok, version} = Postgres.append_to_stream(stream_id, :no_stream, [event])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:194: (test)

  * test append_to_stream/4 handles optimistic concurrency control [L#113]  * test append_to_stream/4 handles optimistic concurrency control (7.8ms) [L#113]

 52) test append_to_stream/4 handles optimistic concurrency control (GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:113
     match (=) failed
     code:  assert {:ok, 1} = Postgres.append_to_stream(stream_id, :no_stream, [event])
     left:  {:ok, 1}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres,
               message: "Unexpected error",
               details: %GameBot.Infrastructure.Persistence.Error{
                 type: :validation,
                 context: nil,
                 message: nil,
                 details: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:116: (test)

  * test read_stream_forward/4 reads events from a stream [L#130]  * test read_stream_forward/4 reads events from a stream (7.5ms) [L#130]

 53) test read_stream_forward/4 reads events from a stream (GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:130
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}}
     code: {:ok, _} = Postgres.append_to_stream(stream_id, :no_stream, [event])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:133: (test)

  * test read_stream_forward/4 reads events from a specific version [L#140]  * test read_stream_forward/4 reads events from a specific version (8.9ms) [L#140]

 54) test read_stream_forward/4 reads events from a specific version (GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:140
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}}
     code: {:ok, _} = Postgres.append_to_stream(stream_id, :no_stream, events)
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:147: (test)

  * test append_to_stream/4 allows :any version for appending [L#121]  * test append_to_stream/4 allows :any version for appending (7.6ms) [L#121]

 55) test append_to_stream/4 allows :any version for appending (GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:121
     match (=) failed
     code:  assert {:ok, 1} = Postgres.append_to_stream(stream_id, :any, [event])
     left:  {:ok, 1}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres,
               message: "Unexpected error",
               details: %GameBot.Infrastructure.Persistence.Error{
                 type: :validation,
                 context: nil,
                 message: nil,
                 details: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:124: (test)


GameBot.Infrastructure.Persistence.EventStore.IntegrationTest [test/game_bot/infrastructure/persistence/event_store/integration_test.exs]
  * test performance characteristics batch operations [L#344]  * test performance characteristics batch operations (0.00ms) [L#344]

 56) test performance characteristics batch operations (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:344
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:55: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit_setup_0/1
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:1: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit__/2

  * test stream operations stream versioning [L#217]  * test stream operations stream versioning (0.00ms) [L#217]

 57) test stream operations stream versioning (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:217
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:55: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit_setup_0/1
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:1: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit__/2

  * test error handling transaction boundaries [L#314]  * test error handling transaction boundaries (0.00ms) [L#314]

 58) test error handling transaction boundaries (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:314
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:55: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit_setup_0/1
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:1: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit__/2

  * test stream operations append and read events [L#196]  * test stream operations append and read events (0.00ms) [L#196]

 59) test stream operations append and read events (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:196
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:55: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit_setup_0/1
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:1: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit__/2

  * test performance characteristics concurrent read performance [L#375]  * test performance characteristics concurrent read performance (0.00ms) [L#375]

 60) test performance characteristics concurrent read performance (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:375
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:55: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit_setup_0/1
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:1: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit__/2

  * test stream operations concurrent operations [L#236]  * test stream operations concurrent operations (0.1ms) [L#236]

 61) test stream operations concurrent operations (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:236
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:55: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit_setup_0/1
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:1: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit__/2

  * test subscription handling multiple subscribers [L#276]  * test subscription handling multiple subscribers (0.00ms) [L#276]

 62) test subscription handling multiple subscribers (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:276
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:55: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit_setup_0/1
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:1: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit__/2

  * test error handling invalid stream operations [L#300]  * test error handling invalid stream operations (0.00ms) [L#300]

 63) test error handling invalid stream operations (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:300
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:55: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit_setup_0/1
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:1: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit__/2

  * test subscription handling subscribe to stream [L#257]  * test subscription handling subscribe to stream (0.00ms) [L#257]

 64) test subscription handling subscribe to stream (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:257
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:55: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit_setup_0/1
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:1: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.__ex_unit__/2


Finished in 8.2 seconds (0.3s async, 7.9s sync)
64 tests, 64 failures

Cleaning up test environment...
