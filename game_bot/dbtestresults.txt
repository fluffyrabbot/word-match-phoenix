Setting up event store schema and tables...
Cleaning up previous event store schema...
Event store setup complete!
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Starting repositories...
Setting up event store schema and tables...
⚠️ Warning: Failed to set up event store schema: %DBConnection.OwnershipError{message: "cannot find ownership process for #PID<0.94.0>.\n\nWhen using ownership, you must manage connections in one\nof the four ways:\n\n* By explicitly checking out a connection\n* By explicitly allowing a spawned process\n* By running the pool in shared mode\n* By using :caller option with allowed process\n\nThe first two options require every new process to explicitly\ncheck a connection out or be allowed by calling checkout or\nallow respectively.\n\nThe third option requires a {:shared, pid} mode to be set.\nIf using shared mode in tests, make sure your tests are not\nasync.\n\nThe fourth option requires [caller: pid] to be used when\nchecking out a connection from the pool. The caller process\nshould already be allowed on a connection.\n\nIf you are reading this error, it means you have not done one\nof the steps above or that the owner process has crashed.\n\nSee Ecto.Adapters.SQL.Sandbox docs for more information."}
00:47:33.105 [error] Error setting up EventStore schema: %DBConnection.OwnershipError{message: "cannot find ownership process for #PID<0.94.0>.\n\nWhen using ownership, you must manage connections in one\nof the four ways:\n\n* By explicitly checking out a connection\n* By explicitly allowing a spawned process\n* By running the pool in shared mode\n* By using :caller option with allowed process\n\nThe first two options require every new process to explicitly\ncheck a connection out or be allowed by calling checkout or\nallow respectively.\n\nThe third option requires a {:shared, pid} mode to be set.\nIf using shared mode in tests, make sure your tests are not\nasync.\n\nThe fourth option requires [caller: pid] to be used when\nchecking out a connection from the pool. The caller process\nshould already be allowed on a connection.\n\nIf you are reading this error, it means you have not done one\nof the steps above or that the owner process has crashed.\n\nSee Ecto.Adapters.SQL.Sandbox docs for more information."}
Tests requiring EventStore will likely fail.

Test environment initialized with:
- Runtime repository implementation: "Not set"
- Testing repositories: [GameBot.Infrastructure.Persistence.Repo, GameBot.Infrastructure.Persistence.Repo.Postgres, GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres]
Running ExUnit with seed: 146923, max_cases: 32
Excluding tags: [:skip_db, :skip_in_ci]



  1) test subscription handling subscribe to stream (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:256
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected exception: Postgrex expected a binary, got ~c\"<0.736.0>\". Please make sure the value you are passing matches the definition in your table or in your query or convert the value accordingly.", details: %DBConnection.EncodeError{message: "Postgrex expected a binary, got ~c\"<0.736.0>\". Please make sure the value you are passing matches the definition in your table or in your query or convert the value accordingly."}, source: nil}}
     code: for {impl, name} <- @implementations do
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:155: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.with_subscription_local/4
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:263: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test subscription handling subscribe to stream"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:259: (test)



  2) test stream operations append and read events (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:195
     Assertion with == failed
     code:  assert Enum.map(read_events, & &1.data) == Enum.map(events, & &1.data)
     left:  [%{"value" => "test1"}, %{"value" => "test2"}]
     right: [%{value: "test1"}, %{value: "test2"}]
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:208: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test stream operations append and read events"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:201: (test)

00:47:33.673 [error] Error in do_append_to_stream transaction: {:error, %GameBot.Infrastructure.Error{type: :concurrency, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Wrong expected version", details: %{actual: 0, expected: 1}, source: nil}}
00:47:33.677 [error] Error in do_append_to_stream transaction: {:error, %GameBot.Infrastructure.Error{type: :concurrency, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Wrong expected version", details: %{actual: 1, expected: 2}, source: nil}}
00:47:33.677 [error] Error in do_append_to_stream transaction: {:error, %GameBot.Infrastructure.Error{type: :concurrency, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Wrong expected version", details: %{actual: 1, expected: 3}, source: nil}}
00:47:33.677 [error] Error in do_append_to_stream transaction: {:error, %GameBot.Infrastructure.Error{type: :concurrency, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Wrong expected version", details: %{actual: 1, expected: 4}, source: nil}}
.00:47:33.688 [error] Error in do_append_to_stream transaction: {:error, %GameBot.Infrastructure.Error{type: :concurrency, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Wrong expected version", details: %{actual: 1, expected: 0}, source: nil}}


  3) test error handling transaction boundaries (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:313
     match (match?) failed
     code:  assert match?({:error, _}, failed_result)
     left:  {:error, _}
     right: {:ok,
             {:error,
              %GameBot.Infrastructure.Error{
                type: :concurrency,
                context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres,
                message: "Wrong expected version",
                details: %{actual: 1, expected: 0},
                source: nil
              }}}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:337: anonymous fn/2 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test error handling transaction boundaries"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:314: (test)



  4) test subscription handling multiple subscribers (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:275
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected exception: Postgrex expected a binary, got ~c\"<0.749.0>\". Please make sure the value you are passing matches the definition in your table or in your query or convert the value accordingly.", details: %DBConnection.EncodeError{message: "Postgrex expected a binary, got ~c\"<0.749.0>\". Please make sure the value you are passing matches the definition in your table or in your query or convert the value accordingly."}, source: nil}}
     code: for {impl, name} <- @implementations do
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:155: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.with_subscription_local/4
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:283: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test subscription handling multiple subscribers"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:278: (test)



  5) test transaction boundaries respects timeout settings (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:149
     ** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.753.0>.

     When using ownership, you must manage connections in one
     of the four ways:

     * By explicitly checking out a connection
     * By explicitly allowing a spawned process
     * By running the pool in shared mode
     * By using :caller option with allowed process

     The first two options require every new process to explicitly
     check a connection out or be allowed by calling checkout or
     allow respectively.

     The third option requires a {:shared, pid} mode to be set.
     If using shared mode in tests, make sure your tests are not
     async.

     The fourth option requires [caller: pid] to be used when
     checking out a connection from the pool. The caller process
     should already be allowed on a connection.

     If you are reading this error, it means you have not done one
     of the steps above or that the owner process has crashed.

     See Ecto.Adapters.SQL.Sandbox docs for more information.
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1093: Ecto.Adapters.SQL.raise_sql_call_error/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:95: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:1: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit__/2



  6) test transaction boundaries commits all changes on success (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:105
     ** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.757.0>.

     When using ownership, you must manage connections in one
     of the four ways:

     * By explicitly checking out a connection
     * By explicitly allowing a spawned process
     * By running the pool in shared mode
     * By using :caller option with allowed process

     The first two options require every new process to explicitly
     check a connection out or be allowed by calling checkout or
     allow respectively.

     The third option requires a {:shared, pid} mode to be set.
     If using shared mode in tests, make sure your tests are not
     async.

     The fourth option requires [caller: pid] to be used when
     checking out a connection from the pool. The caller process
     should already be allowed on a connection.

     If you are reading this error, it means you have not done one
     of the steps above or that the owner process has crashed.

     See Ecto.Adapters.SQL.Sandbox docs for more information.
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1093: Ecto.Adapters.SQL.raise_sql_call_error/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:95: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:1: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit__/2



  7) test execute/3 logs guild context when provided (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:195
     ** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.761.0>.

     When using ownership, you must manage connections in one
     of the four ways:

     * By explicitly checking out a connection
     * By explicitly allowing a spawned process
     * By running the pool in shared mode
     * By using :caller option with allowed process

     The first two options require every new process to explicitly
     check a connection out or be allowed by calling checkout or
     allow respectively.

     The third option requires a {:shared, pid} mode to be set.
     If using shared mode in tests, make sure your tests are not
     async.

     The fourth option requires [caller: pid] to be used when
     checking out a connection from the pool. The caller process
     should already be allowed on a connection.

     If you are reading this error, it means you have not done one
     of the steps above or that the owner process has crashed.

     See Ecto.Adapters.SQL.Sandbox docs for more information.
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1093: Ecto.Adapters.SQL.raise_sql_call_error/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:95: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:1: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit__/2



  8) test execute_steps/3 stops execution on first error (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:260
     ** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.765.0>.

     When using ownership, you must manage connections in one
     of the four ways:

     * By explicitly checking out a connection
     * By explicitly allowing a spawned process
     * By running the pool in shared mode
     * By using :caller option with allowed process

     The first two options require every new process to explicitly
     check a connection out or be allowed by calling checkout or
     allow respectively.

     The third option requires a {:shared, pid} mode to be set.
     If using shared mode in tests, make sure your tests are not
     async.

     The fourth option requires [caller: pid] to be used when
     checking out a connection from the pool. The caller process
     should already be allowed on a connection.

     If you are reading this error, it means you have not done one
     of the steps above or that the owner process has crashed.

     See Ecto.Adapters.SQL.Sandbox docs for more information.
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1093: Ecto.Adapters.SQL.raise_sql_call_error/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:95: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:1: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit__/2



  9) test execute_steps/3 executes multiple steps with guild context (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:240
     ** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.769.0>.

     When using ownership, you must manage connections in one
     of the four ways:

     * By explicitly checking out a connection
     * By explicitly allowing a spawned process
     * By running the pool in shared mode
     * By using :caller option with allowed process

     The first two options require every new process to explicitly
     check a connection out or be allowed by calling checkout or
     allow respectively.

     The third option requires a {:shared, pid} mode to be set.
     If using shared mode in tests, make sure your tests are not
     async.

     The fourth option requires [caller: pid] to be used when
     checking out a connection from the pool. The caller process
     should already be allowed on a connection.

     If you are reading this error, it means you have not done one
     of the steps above or that the owner process has crashed.

     See Ecto.Adapters.SQL.Sandbox docs for more information.
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1093: Ecto.Adapters.SQL.raise_sql_call_error/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:95: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:1: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit__/2



 10) test transaction boundaries rolls back all changes on error (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:121
     ** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.773.0>.

     When using ownership, you must manage connections in one
     of the four ways:

     * By explicitly checking out a connection
     * By explicitly allowing a spawned process
     * By running the pool in shared mode
     * By using :caller option with allowed process

     The first two options require every new process to explicitly
     check a connection out or be allowed by calling checkout or
     allow respectively.

     The third option requires a {:shared, pid} mode to be set.
     If using shared mode in tests, make sure your tests are not
     async.

     The fourth option requires [caller: pid] to be used when
     checking out a connection from the pool. The caller process
     should already be allowed on a connection.

     If you are reading this error, it means you have not done one
     of the steps above or that the owner process has crashed.

     See Ecto.Adapters.SQL.Sandbox docs for more information.
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1093: Ecto.Adapters.SQL.raise_sql_call_error/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:95: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:1: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit__/2



 11) test transaction boundaries handles exceptions by rolling back (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:136
     ** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.777.0>.

     When using ownership, you must manage connections in one
     of the four ways:

     * By explicitly checking out a connection
     * By explicitly allowing a spawned process
     * By running the pool in shared mode
     * By using :caller option with allowed process

     The first two options require every new process to explicitly
     check a connection out or be allowed by calling checkout or
     allow respectively.

     The third option requires a {:shared, pid} mode to be set.
     If using shared mode in tests, make sure your tests are not
     async.

     The fourth option requires [caller: pid] to be used when
     checking out a connection from the pool. The caller process
     should already be allowed on a connection.

     If you are reading this error, it means you have not done one
     of the steps above or that the owner process has crashed.

     See Ecto.Adapters.SQL.Sandbox docs for more information.
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1093: Ecto.Adapters.SQL.raise_sql_call_error/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:95: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:1: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit__/2



 12) test execute/3 logs without guild context when not provided (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:209
     ** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.781.0>.

     When using ownership, you must manage connections in one
     of the four ways:

     * By explicitly checking out a connection
     * By explicitly allowing a spawned process
     * By running the pool in shared mode
     * By using :caller option with allowed process

     The first two options require every new process to explicitly
     check a connection out or be allowed by calling checkout or
     allow respectively.

     The third option requires a {:shared, pid} mode to be set.
     If using shared mode in tests, make sure your tests are not
     async.

     The fourth option requires [caller: pid] to be used when
     checking out a connection from the pool. The caller process
     should already be allowed on a connection.

     If you are reading this error, it means you have not done one
     of the steps above or that the owner process has crashed.

     See Ecto.Adapters.SQL.Sandbox docs for more information.
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1093: Ecto.Adapters.SQL.raise_sql_call_error/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:95: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:1: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit__/2



 13) test transaction boundaries supports nested transactions (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:173
     ** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.785.0>.

     When using ownership, you must manage connections in one
     of the four ways:

     * By explicitly checking out a connection
     * By explicitly allowing a spawned process
     * By running the pool in shared mode
     * By using :caller option with allowed process

     The first two options require every new process to explicitly
     check a connection out or be allowed by calling checkout or
     allow respectively.

     The third option requires a {:shared, pid} mode to be set.
     If using shared mode in tests, make sure your tests are not
     async.

     The fourth option requires [caller: pid] to be used when
     checking out a connection from the pool. The caller process
     should already be allowed on a connection.

     If you are reading this error, it means you have not done one
     of the steps above or that the owner process has crashed.

     See Ecto.Adapters.SQL.Sandbox docs for more information.
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1093: Ecto.Adapters.SQL.raise_sql_call_error/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:95: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:1: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit__/2



 14) test execute/3 adds guild_id to error context on failure (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:222
     ** (DBConnection.OwnershipError) cannot find ownership process for #PID<0.789.0>.

     When using ownership, you must manage connections in one
     of the four ways:

     * By explicitly checking out a connection
     * By explicitly allowing a spawned process
     * By running the pool in shared mode
     * By using :caller option with allowed process

     The first two options require every new process to explicitly
     check a connection out or be allowed by calling checkout or
     allow respectively.

     The third option requires a {:shared, pid} mode to be set.
     If using shared mode in tests, make sure your tests are not
     async.

     The fourth option requires [caller: pid] to be used when
     checking out a connection from the pool. The caller process
     should already be allowed on a connection.

     If you are reading this error, it means you have not done one
     of the steps above or that the owner process has crashed.

     See Ecto.Adapters.SQL.Sandbox docs for more information.
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1093: Ecto.Adapters.SQL.raise_sql_call_error/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:95: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/transaction_test.exs:1: GameBot.Infrastructure.Persistence.Repo.TransactionTest.__ex_unit__/2


Finished in 2.6 seconds (0.00s async, 2.6s sync)
15 tests, 14 failures

Cleaning up test environment...
