Setting up event store schema and tables...
Cleaning up previous event store schema...
Event store setup complete!
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres

=== Initializing test environment (attempt 1/3) ===

=== Test Environment Initialized Successfully ===

Recompiled test events file: c:/Users/ktw30/apps/word match phoenix/game_bot/test/support/test_events.ex
Protocol implementation module loaded: GameBot.Domain.Events.TestEvents.ValidatorTestEvent
Protocol implementation module loaded: GameBot.Domain.Events.TestEvents.ValidatorOptionalFieldsEvent
Running ExUnit with seed: 0, max_cases: 32
Excluding tags: [:skip_db, :skip_in_ci]

Testing append_to_stream with test-stream-521


  1) test GuessProcessed serializes and deserializes correctly (GameBot.Domain.Events.GameEventsTest)
     test/game_bot/domain/events/game_events_test.exs:200
     ** (KeyError) key :player1_id not found in: %GameBot.Domain.Events.TestEvents.TestEvent{
       game_id: "game-123",
       guild_id: "guild-123",
       mode: :two_player,
       timestamp: ~U[2025-03-14 07:22:40.146000Z],
       metadata: %{
         "correlation_id" => "corr-123",
         "guild_id" => "guild-123",
         "source_id" => "msg-123"
       },
       count: nil,
       score: nil,
       tags: MapSet.new([]),
       nested_data: nil,
       optional_field: nil,
       round_number: 1,
       teams: nil,
       team_ids: nil,
       player_ids: nil,
       player1_info: nil,
       player2_info: nil,
       player1_word: "word1",
       player2_word: "word2",
       guess_successful: true,
       match_score: 10,
       guess_count: 1,
       round_guess_count: 1,
       total_guesses: 1,
       guess_duration: 1000,
       config: nil,
       started_at: nil,
       roles: nil,
       team_id: "team1"
     }. Did you mean:

           * :player1_info
           * :player1_word
           * :player2_info
           * :player2_word
           * :player_ids

     code: assert reconstructed.player1_id == original.player1_id
     stacktrace:
       test/game_bot/domain/events/game_events_test.exs:210: (test)

00:22:40.380 [error] Error in append_events: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: "1988", message: "null value in column \"stream_id\" of relation \"events\" violates not-null constraint", table: "events", file: "execMain.c", unknown: "ERROR", column: "stream_id", severity: "ERROR", schema: "event_store", routine: "ExecConstraints", detail: "Failing row contains (09563ef1-9486-4169-8992-c3628044383b, null, test_event, {\"test\": \"data\"}, {\"test\": \"metadata\"}, 1, 2025-03-14 00:22:40.325564-07).", pg_code: "23502"}, connection_id: 40768, query: nil}
00:22:40.383 [error] Stream ID: "test-stream-521"
00:22:40.383 [error] Events: [%{"data" => %{test: "data"}, "metadata" => %{test: "metadata"}, "type" => "test_event", "version" => 1}]
00:22:40.385 [error] Error in do_append_to_stream transaction: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Failed to append events", details: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: "1988", message: "null value in column \"stream_id\" of relation \"events\" violates not-null constraint", table: "events", file: "execMain.c", unknown: "ERROR", column: "stream_id", severity: "ERROR", schema: "event_store", routine: "ExecConstraints", detail: "Failing row contains (09563ef1-9486-4169-8992-c3628044383b, null, test_event, {\"test\": \"data\"}, {\"test\": \"metadata\"}, 1, 2025-03-14 00:22:40.325564-07).", pg_code: "23502"}, connection_id: 40768, query: nil}, source: nil}}


  2) test basic operations with EventStore (GameBot.Infrastructure.Persistence.EventStore.SimpleTest)
     test/game_bot/infrastructure/persistence/event_store/simple_test.exs:23
     Failed to append to stream: %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: :rollback, source: nil}
     code: assert_append_and_read(EventStore, stream_id, event)
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/simple_test.exs:36: (test)



  3) test adapter functions append_to_stream/4 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:40
     ** (FunctionClauseError) no function clause matching in GenServer.whereis/1

     The following arguments were given to GenServer.whereis/1:

         # 1
         "test-stream-581"

     Attempted function clauses (showing 6 out of 6):

         def whereis(pid) when -is_pid(pid)-
         def whereis(name) when -is_atom(name)-
         def whereis(-{:global, name}-)
         def whereis(-{:via, mod, name}-)
         def whereis(-{name, local}-) when -is_atom(name)- and -local == node()-
         def whereis(-{name, node} = server-) when -is_atom(name)- and -is_atom(node)-

     code: assert {:ok, 1} = Adapter.append_to_stream(stream_id, :no_stream, [event])
     stacktrace:
       (elixir 1.18.2) lib/gen_server.ex:1286: GenServer.whereis/1
       (elixir 1.18.2) lib/gen_server.ex:1119: GenServer.call/3
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:48: (test)



  4) test adapter functions read_stream_forward/4 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:51
     ** (FunctionClauseError) no function clause matching in GenServer.whereis/1

     The following arguments were given to GenServer.whereis/1:

         # 1
         "test-stream-268"

     Attempted function clauses (showing 6 out of 6):

         def whereis(pid) when -is_pid(pid)-
         def whereis(name) when -is_atom(name)-
         def whereis(-{:global, name}-)
         def whereis(-{:via, mod, name}-)
         def whereis(-{name, local}-) when -is_atom(name)- and -local == node()-
         def whereis(-{name, node} = server-) when -is_atom(name)- and -is_atom(node)-

     code: assert {:ok, 2} = Adapter.append_to_stream(stream_id, :no_stream, events)
     stacktrace:
       (elixir 1.18.2) lib/gen_server.ex:1286: GenServer.whereis/1
       (elixir 1.18.2) lib/gen_server.ex:1119: GenServer.call/3
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:62: (test)



  5) test adapter functions stream_version/2 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:69
     ** (UndefinedFunctionError) function GameBot.Test.EventStoreCore.stream_version/2 is undefined or private. Did you mean:

           * get_stream_version/1
           * get_stream_version/2
           * get_stream_version/3

     code: assert {:ok, 0} = Adapter.stream_version(stream_id)
     stacktrace:
       (game_bot 0.1.0) GameBot.Test.EventStoreCore.stream_version("test-stream-332", [])
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:77: (test)



  6) test adapter functions delete_stream/3 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:86
     ** (FunctionClauseError) no function clause matching in GenServer.whereis/1

     The following arguments were given to GenServer.whereis/1:

         # 1
         "test-stream-396"

     Attempted function clauses (showing 6 out of 6):

         def whereis(pid) when -is_pid(pid)-
         def whereis(name) when -is_atom(name)-
         def whereis(-{:global, name}-)
         def whereis(-{:via, mod, name}-)
         def whereis(-{name, local}-) when -is_atom(name)- and -local == node()-
         def whereis(-{name, node} = server-) when -is_atom(name)- and -is_atom(node)-

     code: assert {:ok, 1} = Adapter.append_to_stream(stream_id, :no_stream, [event])
     stacktrace:
       (elixir 1.18.2) lib/gen_server.ex:1286: GenServer.whereis/1
       (elixir 1.18.2) lib/gen_server.ex:1119: GenServer.call/3
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:94: (test)

00:22:40.502 [error] Error in append_events: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: "1988", message: "null value in column \"stream_id\" of relation \"events\" violates not-null constraint", table: "events", file: "execMain.c", unknown: "ERROR", column: "stream_id", severity: "ERROR", schema: "event_store", routine: "ExecConstraints", detail: "Failing row contains (c2364bf4-fd54-4590-902c-4cb816a3e612, null, test_event, {\"test\": \"data\"}, {\"guild_id\": \"test-guild-1\"}, 1, 2025-03-14 00:22:40.498668-07).", pg_code: "23502"}, connection_id: 36928, query: nil}
00:22:40.502 [error] Stream ID: "test-macro-integration-135"
00:22:40.502 [error] Events: [%{"data" => %{test: "data"}, "metadata" => %{guild_id: "test-guild-1"}, "type" => "test_event", "version" => 1}]
00:22:40.502 [error] Error in do_append_to_stream transaction: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Failed to append events", details: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: "1988", message: "null value in column \"stream_id\" of relation \"events\" violates not-null constraint", table: "events", file: "execMain.c", unknown: "ERROR", column: "stream_id", severity: "ERROR", schema: "event_store", routine: "ExecConstraints", detail: "Failing row contains (c2364bf4-fd54-4590-902c-4cb816a3e612, null, test_event, {\"test\": \"data\"}, {\"guild_id\": \"test-guild-1\"}, 1, 2025-03-14 00:22:40.498668-07).", pg_code: "23502"}, connection_id: 36928, query: nil}, source: nil}}


  7) test append and read stream operations work (GameBot.Infrastructure.Persistence.EventStore.MacroIntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:50
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: :rollback, source: nil}}
     code: {:ok, version} = EventStore.append_to_stream(stream_id, :no_stream, [event], [timeout: @db_timeout])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:55: (test)

00:22:40.625 [error] Error in append_events: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: "1988", message: "null value in column \"stream_id\" of relation \"events\" violates not-null constraint", table: "events", file: "execMain.c", unknown: "ERROR", column: "stream_id", severity: "ERROR", schema: "event_store", routine: "ExecConstraints", detail: "Failing row contains (8dd8e900-b23d-4e9c-8a1c-c7b3fa9c2f8a, null, test_event, {\"test\": \"version_test\"}, {\"guild_id\": \"test-guild-1\"}, 1, 2025-03-14 00:22:40.622148-07).", pg_code: "23502"}, connection_id: 25532, query: nil}
00:22:40.625 [error] Stream ID: "test-macro-integration-135"
00:22:40.625 [error] Events: [%{"data" => %{test: "version_test"}, "metadata" => %{guild_id: "test-guild-1"}, "type" => "test_event", "version" => 1}]
00:22:40.625 [error] Error in do_append_to_stream transaction: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Failed to append events", details: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: "1988", message: "null value in column \"stream_id\" of relation \"events\" violates not-null constraint", table: "events", file: "execMain.c", unknown: "ERROR", column: "stream_id", severity: "ERROR", schema: "event_store", routine: "ExecConstraints", detail: "Failing row contains (8dd8e900-b23d-4e9c-8a1c-c7b3fa9c2f8a, null, test_event, {\"test\": \"version_test\"}, {\"guild_id\": \"test-guild-1\"}, 1, 2025-03-14 00:22:40.622148-07).", pg_code: "23502"}, connection_id: 25532, query: nil}, source: nil}}


  8) test stream_version returns correct version (GameBot.Infrastructure.Persistence.EventStore.MacroIntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:65
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: :rollback, source: nil}}
     code: {:ok, new_version} = EventStore.append_to_stream(stream_id, :no_stream, [event], [timeout: @db_timeout])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:74: (test)

00:22:40.747 [error] Error in append_events: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: "1988", message: "null value in column \"stream_id\" of relation \"events\" violates not-null constraint", table: "events", file: "execMain.c", unknown: "ERROR", column: "stream_id", severity: "ERROR", schema: "event_store", routine: "ExecConstraints", detail: "Failing row contains (e46985c6-7ae3-4b2d-a203-3877d655f99f, null, test_event, {\"test\": \"delete_test\"}, {\"guild_id\": \"test-guild-1\"}, 1, 2025-03-14 00:22:40.744434-07).", pg_code: "23502"}, connection_id: 38328, query: nil}
00:22:40.747 [error] Stream ID: "test-macro-integration-135"
00:22:40.747 [error] Events: [%{"data" => %{test: "delete_test"}, "metadata" => %{guild_id: "test-guild-1"}, "type" => "test_event", "version" => 1}]
00:22:40.747 [error] Error in do_append_to_stream transaction: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Failed to append events", details: %Postgrex.Error{message: nil, postgres: %{code: :not_null_violation, line: "1988", message: "null value in column \"stream_id\" of relation \"events\" violates not-null constraint", table: "events", file: "execMain.c", unknown: "ERROR", column: "stream_id", severity: "ERROR", schema: "event_store", routine: "ExecConstraints", detail: "Failing row contains (e46985c6-7ae3-4b2d-a203-3877d655f99f, null, test_event, {\"test\": \"delete_test\"}, {\"guild_id\": \"test-guild-1\"}, 1, 2025-03-14 00:22:40.744434-07).", pg_code: "23502"}, connection_id: 38328, query: nil}, source: nil}}


  9) test delete_stream removes the stream (GameBot.Infrastructure.Persistence.EventStore.MacroIntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:82
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: :rollback, source: nil}}
     code: {:ok, version} = EventStore.append_to_stream(stream_id, :no_stream, [event], [timeout: @db_timeout])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:87: (test)

00:22:40.762 [error] Error configuring sandbox for GameBot.Infrastructure.Persistence.Repo: %DBConnection.ConnectionError{message: "tcp send: closed", severity: :error, reason: :error}
00:22:40.762 [error] Postgrex.Protocol (#PID<0.586.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:41.232 [error] Postgrex.Protocol (#PID<0.604.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:41.232 [error] Postgrex.Protocol (#PID<0.597.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:41.232 [error] Postgrex.Protocol (#PID<0.605.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:41.234 [error] Postgrex.Protocol (#PID<0.600.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:41.234 [error] Postgrex.Protocol (#PID<0.599.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:41.234 [error] Postgrex.Protocol (#PID<0.598.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:41.234 [error] Postgrex.Protocol (#PID<0.603.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:41.234 [error] Postgrex.Protocol (#PID<0.601.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:41.234 [error] Postgrex.Protocol (#PID<0.596.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:41.234 [error] Postgrex.Protocol (#PID<0.602.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:42.654 [warning] Event store is not running, cannot reset
.00:22:43.247 [error] Postgrex.Protocol (#PID<0.604.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:43.247 [error] Postgrex.Protocol (#PID<0.597.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:43.247 [error] Postgrex.Protocol (#PID<0.599.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:43.247 [error] Postgrex.Protocol (#PID<0.605.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:43.247 [error] Postgrex.Protocol (#PID<0.598.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:43.247 [error] Postgrex.Protocol (#PID<0.602.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:43.248 [error] Postgrex.Protocol (#PID<0.601.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:43.248 [error] Postgrex.Protocol (#PID<0.600.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:43.248 [error] Postgrex.Protocol (#PID<0.596.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed
00:22:43.249 [error] Postgrex.Protocol (#PID<0.603.0>) disconnected: ** (DBConnection.ConnectionError) tcp send: closed


 10) test ensure_all_started starts all repositories (GameBot.Infrastructure.Persistence.RepositoryManagerTest)
     test/game_bot/infrastructure/persistence/repository_manager_test.exs:42
     Assertion with == failed
     code:  assert Process.whereis(Repo) == nil
     left:  #PID<0.927.0>
     right: nil
     stacktrace:
       test/game_bot/infrastructure/persistence/repository_manager_test.exs:44: (test)

.

 11) test diagnostic: Repository initialization (GameBot.DiagnosticTest)
     test/diagnostic_test.exs:78
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo because it was not started or it does not exist
     code: results = Enum.map(repos, fn repo ->
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       test/diagnostic_test.exs:89: anonymous fn/1 in GameBot.DiagnosticTest."test diagnostic: Repository initialization"/1
       (elixir 1.18.2) lib/enum.ex:1714: Enum."-map/2-lists^map/1-1-"/2
       test/diagnostic_test.exs:86: (test)



 12) test sync tests event store operations (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:25
     ** (RuntimeError) could not lookup GameBot.Infrastructure.Persistence.EventStore because it was not started or it does not exist
     code: assert {:ok, _} = EventStore.append_to_stream(stream_id, :any_version, [event])
     stacktrace:
       (eventstore 1.4.8) lib/event_store/config/store.ex:65: EventStore.Config.Store.lookup/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.parse_opts/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.append_to_stream/4
       test/game_bot/test/database_manager_test.exs:29: (test)



 13) test sync tests handles database errors gracefully (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:34
     ** (Postgrex.Error) ERROR 42883 (undefined_function) function invalid_function() does not exist

         query: SELECT invalid_function()

         hint: No function matches the given name and argument types. You might need to add explicit type casts.
     code: assert {:error, _} = Repo.transaction(fn ->
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1096: Ecto.Adapters.SQL.raise_sql_call_error/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1400: anonymous fn/3 in Ecto.Adapters.SQL.checkout_or_transaction/4
       (db_connection 2.7.0) lib/db_connection.ex:1756: DBConnection.run_transaction/4
       test/game_bot/test/database_manager_test.exs:35: (test)



 14) test async tests concurrent event store operations (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:54
     ** (RuntimeError) could not lookup GameBot.Infrastructure.Persistence.EventStore because it was not started or it does not exist
     code: assert {:ok, _} = EventStore.append_to_stream(stream_id, :any_version, [event])
     stacktrace:
       (eventstore 1.4.8) lib/event_store/config/store.ex:65: EventStore.Config.Store.lookup/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.parse_opts/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.append_to_stream/4
       test/game_bot/test/database_manager_test.exs:58: (test)



 15) test error handling handles transaction failures (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:159
     ** (Postgrex.Error) ERROR 42P01 (undefined_table) relation "nonexistent_table" does not exist

         query: SELECT * FROM nonexistent_table
     code: assert {:error, _} = Repo.transaction(fn ->
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1096: Ecto.Adapters.SQL.raise_sql_call_error/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1400: anonymous fn/3 in Ecto.Adapters.SQL.checkout_or_transaction/4
       (db_connection 2.7.0) lib/db_connection.ex:1756: DBConnection.run_transaction/4
       test/game_bot/test/database_manager_test.exs:160: (test)



 16) test error handling handles event store errors (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:165
     ** (RuntimeError) could not lookup GameBot.Infrastructure.Persistence.EventStore because it was not started or it does not exist
     code: EventStore.read_stream_forward("nonexistent-stream")
     stacktrace:
       (eventstore 1.4.8) lib/event_store/config/store.ex:65: EventStore.Config.Store.lookup/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.parse_opts/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.read_stream_forward/4
       test/game_bot/test/database_manager_test.exs:168: (test)



 17) test event store and repository interaction event store and repository interaction rolls back both event store and repository on error (GameBot.Infrastructure.Persistence.IntegrationTest)
     test/game_bot/infrastructure/persistence/integration_test.exs:136
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1242.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo, pool_size: 10, ownership_timeout: 60000, queue_target: 5000, queue_interval: 5000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/integration_test.exs:125: anonymous fn/0 in GameBot.Infrastructure.Persistence.IntegrationTest.__ex_unit_setup_1/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

     The following output was logged:
     00:22:51.615 [error] Failed to start TestEventStore: {:error, {:already_started, #PID<0.1274.0>}}
     


 18) test store_replay/1 stores a replay successfully (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:63
     ** (KeyError) key :replay_id not found in: {:ok,
      %{
        mode: :two_player,
        start_time: ~U[2025-03-14 06:22:51.805000Z],
        created_at: ~U[2025-03-14 07:22:51.808000Z],
        game_id: "test-game-839",
        replay_id: "a74d5514-0823-4d09-838b-f4c985d52558",
        display_name: "test-replay-123",
        end_time: ~U[2025-03-14 07:22:51.808000Z],
        event_count: 42,
        base_stats: %{
          total_guesses: 75,
          rounds: 10,
          duration_seconds: 3600,
          player_count: 2,
          team_count: 2
        },
        mode_stats: %{
          successful_guesses: 50,
          failed_guesses: 25,
          team_scores: %{"team1" => 30, "team2" => 20},
          winning_team: "team1",
          average_guess_time: 15.5
        },
        version_map: %{"game_completed" => 1, "game_started" => 1}
      }}

     If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
     code: assert stored_replay.replay_id == replay.replay_id
     stacktrace:
       test/game_bot/replay/storage_test.exs:76: (test)

00:22:51.969 [error] Failed to store replay: [display_name: {"has already been taken", []}]


 19) test store_replay/1 handles insert errors (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:82
     match (=) failed
     code:  assert {:error, %Ecto.Changeset{} = error_changeset} = result
     left:  {:error, %Ecto.Changeset{} = error_changeset}
     right: {:ok,
             {:error,
              #Ecto.Changeset<
                action: nil,
                changes: %{},
                errors: [
                  display_name: {"has already been taken", []}
                ],
                data: nil,
                valid?: false,
                ...
              >}}
     stacktrace:
       test/game_bot/replay/storage_test.exs:97: (test)



 20) test get_replay/2 retrieves a replay with events (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:138
     ** (ErlangError) Erlang error: {:not_mocked, GameBot.Replay.EventStoreAccess}
     stacktrace:
       (meck 0.9.2) c:/Users/ktw30/apps/word match phoenix/game_bot/deps/meck/src/meck_proc.erl:491: :meck_proc.gen_server/3
       (meck 0.9.2) c:/Users/ktw30/apps/word match phoenix/game_bot/deps/meck/src/meck.erl:484: :meck.unload/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

00:22:52.398 [error] Failed to load events for replay 98c87fa7-929a-49b2-b552-c4b714599122: :stream_not_found


 21) test get_replay/2 handles event loading errors (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:177
     ** (ErlangError) Erlang error: {:not_mocked, GameBot.Replay.EventStoreAccess}
     stacktrace:
       (meck 0.9.2) c:/Users/ktw30/apps/word match phoenix/game_bot/deps/meck/src/meck_proc.erl:491: :meck_proc.gen_server/3
       (meck 0.9.2) c:/Users/ktw30/apps/word match phoenix/game_bot/deps/meck/src/meck.erl:484: :meck.unload/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 22) test list_replays/1 lists replays with default params (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:219
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not a list

     code: assert length(list) == 2
     stacktrace:
       :erlang.length({:ok, []})
       test/game_bot/replay/storage_test.exs:239: (test)



 23) test list_replays/1 lists replays with filters (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:243
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not a list

     code: assert length(list) == 1
     stacktrace:
       :erlang.length({:ok, []})
       test/game_bot/replay/storage_test.exs:264: (test)



 24) test list_replays/1 returns empty list when no replays match filters (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:269
     Assertion with == failed
     code:  assert list == []
     left:  {:ok, []}
     right: []
     stacktrace:
       test/game_bot/replay/storage_test.exs:283: (test)



 25) test log_access/6 returns error on failed insert (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:310
     match (=) failed
     code:  assert {:error, changeset} = result
     left:  {:error, changeset}
     right: :ok
     stacktrace:
       test/game_bot/replay/storage_test.exs:324: (test)



 26) test cleanup_old_replays/1 deletes old replays (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:331
     Assertion with == failed
     code:  assert count == 5
     left:  {:ok, 0}
     right: 5
     stacktrace:
       test/game_bot/replay/storage_test.exs:347: (test)



 27) test cleanup_old_replays/1 handles delete errors (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:351
     match (=) failed
     code:  assert {:error, "database error"} = result
     left:  {:error, "database error"}
     right: {:ok, {:ok, 0}}
     stacktrace:
       test/game_bot/replay/storage_test.exs:366: (test)



 28) test execute_transaction/1 successfully executes transaction (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:44
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2



 29) test execute_transaction/1 rolls back on error (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:53
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2



 30) test execute_transaction/1 handles nested transactions (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:64
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2



 31) test insert_record/2 successfully inserts valid record (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:77
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2



 32) test insert_record/2 handles validation errors (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:83
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2



 33) test insert_record/2 handles constraint violations (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:88
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2



 34) test update_record/2 successfully updates record (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:96
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2



 35) test update_record/2 handles concurrent modifications (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:105
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2



 36) test delete_record/2 successfully deletes record (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:116
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2



 37) test delete_record/2 handles concurrent deletions (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:122
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2

???????????????

 37) GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest: failure on setup_all callback, all tests have been invalidated
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       (game_bot 0.1.0) test/support/event_store_case.ex:189: GameBot.EventStoreCase.ensure_event_store_schema/0
       (game_bot 0.1.0) test/support/event_store_case.ex:41: GameBot.EventStoreCase.__ex_unit_setup_all_0/1
       (game_bot 0.1.0) test/support/event_store_case.ex:1: GameBot.EventStoreCase.__ex_unit__/2
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:1: GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest.__ex_unit__/2

Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres


 38) test transaction boundaries commits all changes on success (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:123
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1708.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) shutdown
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres


 39) test transaction boundaries rolls back all changes on error (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:139
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1756.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres


 40) test transaction boundaries handles exceptions by rolling back (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:154
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1804.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
00:23:11.390 [error] Postgrex.Protocol (#PID<0.1857.0>) disconnected: ** (DBConnection.ConnectionError) client #PID<0.1819.0> timed out because it queued and checked out the connection for longer than 10ms

Client #PID<0.1819.0> is still using a connection from owner at location:

    (elixir 1.18.2) lib/process.ex:317: Process.sleep/1
    test/game_bot/infrastructure/persistence/repo/transaction_test.exs:174: anonymous fn/2 in GameBot.Infrastructure.Persistence.Repo.TransactionTest."test transaction boundaries respects timeout settings"/1
    (elixir 1.18.2) lib/enum.ex:4503: Enum.reduce/3
    test/game_bot/infrastructure/persistence/repo/transaction_test.exs:173: anonymous fn/0 in GameBot.Infrastructure.Persistence.Repo.TransactionTest."test transaction boundaries respects timeout settings"/1
    (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/repo/postgres.ex:142: anonymous fn/1 in GameBot.Infrastructure.Persistence.Repo.Postgres.execute_transaction/2
    (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1400: anonymous fn/3 in Ecto.Adapters.SQL.checkout_or_transaction/4
    (db_connection 2.7.0) lib/db_connection.ex:1756: DBConnection.run_transaction/4
    (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/repo/postgres.ex:140: anonymous fn/2 in GameBot.Infrastructure.Persistence.Repo.Postgres.execute_transaction/2
    (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/repo/postgres.ex:176: GameBot.Infrastructure.Persistence.Repo.Postgres.with_retry/2
    test/game_bot/infrastructure/persistence/repo/transaction_test.exs:169: GameBot.Infrastructure.Persistence.Repo.TransactionTest."test transaction boundaries respects timeout settings"/1
    (ex_unit 1.18.2) lib/ex_unit/runner.ex:511: ExUnit.Runner.exec_test/2
    (stdlib 6.2) timer.erl:595: :timer.tc/2
    (ex_unit 1.18.2) lib/ex_unit/runner.ex:433: anonymous fn/6 in ExUnit.Runner.spawn_test_monitor/4

The connection itself was checked out by #PID<0.1819.0> at location:

    (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/repo/postgres.ex:140: anonymous fn/2 in GameBot.Infrastructure.Persistence.Repo.Postgres.execute_transaction/2
    (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/repo/postgres.ex:176: GameBot.Infrastructure.Persistence.Repo.Postgres.with_retry/2
    test/game_bot/infrastructure/persistence/repo/transaction_test.exs:169: GameBot.Infrastructure.Persistence.Repo.TransactionTest."test transaction boundaries respects timeout settings"/1
    (ex_unit 1.18.2) lib/ex_unit/runner.ex:511: ExUnit.Runner.exec_test/2
    (stdlib 6.2) timer.erl:595: :timer.tc/2
    (ex_unit 1.18.2) lib/ex_unit/runner.ex:433: anonymous fn/6 in ExUnit.Runner.spawn_test_monitor/4




 41) test transaction boundaries respects timeout settings (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:167
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres


 42) test transaction boundaries supports nested transactions (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:191
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1901.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 43) test execute/3 logs guild context when provided (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:213
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1949.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 44) test execute/3 logs without guild context when not provided (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:227
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 45) test execute/3 adds guild_id to error context on failure (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:240
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.2059.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 46) test execute_steps/3 executes multiple steps with guild context (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:258
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.2114.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 47) test execute_steps/3 stops execution on first error (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:278
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.2169.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0



 48) test stream operations append and read events (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:209
     match (=) failed
     code:  assert {:ok, _} = impl.append_to_stream(stream_id, 0, events, timeout: @db_timeout)
     left:  {:ok, _}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres,
               message: "Unexpected exception: could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist",
               details: %RuntimeError{
                 message: "could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist"
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:219: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test stream operations append and read events"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:215: (test)



 49) test stream operations stream versioning (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:230
     match (=) failed
     code:  assert {:ok, _} = impl.append_to_stream(stream_id, 0, [event1])
     left:  {:ok, _}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres,
               message: "Unexpected exception: could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist",
               details: %RuntimeError{
                 message: "could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist"
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:238: anonymous fn/4 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test stream operations stream versioning"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:234: (test)



 50) test stream operations concurrent operations (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:249
     Assertion with == failed
     code:  assert Enum.count(results, &match?({:ok, _}, &1)) == 1
     left:  0
     right: 1
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:259: anonymous fn/2 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test stream operations concurrent operations"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:250: (test)



 51) test subscription handling subscribe to stream (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:270
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected exception: could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist", details: %RuntimeError{message: "could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist"}, source: nil}}
     code: for {impl, name} <- @implementations do
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:169: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.with_subscription_local/4
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:277: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test subscription handling subscribe to stream"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:273: (test)



 52) test subscription handling multiple subscribers (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:289
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected exception: could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist", details: %RuntimeError{message: "could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist"}, source: nil}}
     code: for {impl, name} <- @implementations do
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:169: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.with_subscription_local/4
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:297: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test subscription handling multiple subscribers"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:292: (test)



 53) test error handling transaction boundaries (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:327
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist
     code: for {impl, name} <- @implementations do
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto 3.12.5) lib/ecto/repo/supervisor.ex:176: Ecto.Repo.Supervisor.tuplet/2
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/adapter/postgres.ex:34: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres.transaction/2
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:333: anonymous fn/2 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test error handling transaction boundaries"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:328: (test)



 54) test performance characteristics batch operations (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:357
     ** (MatchError) no match of right hand side value: {102, {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected exception: could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist", details: %RuntimeError{message: "could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist"}, source: nil}}}
     code: for {impl, name} <- @implementations do
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:364: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test performance characteristics batch operations"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:360: (test)



 55) test performance characteristics concurrent read performance (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:388
     match (=) failed
     code:  assert {:ok, _} = impl.append_to_stream(stream_id, 0, events)
     left:  {:ok, _}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres,
               message: "Unexpected exception: could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist",
               details: %RuntimeError{
                 message: "could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist"
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:395: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test performance characteristics concurrent read performance"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:391: (test)


Finished in 45.2 seconds (0.3s async, 44.9s sync)
72 tests, 55 failures, 15 invalid
00:23:25.143 [info] Cleaning up test environment
00:23:25.143 [info] Performing graceful shutdown of database connections
00:23:25.448 [warning] Event store is not running, cannot reset

=== Cleaning up after test suite ===
00:23:25.448 [info] Test environment cleanup completed
00:23:25.448 [info] Cleaning up test environment
=== Test suite cleanup complete ===

00:23:25.664 [info] Test environment cleanup completed
