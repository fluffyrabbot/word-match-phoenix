Setting up event store schema and tables...
Cleaning up previous event store schema...
Event store setup complete!
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres

=== Initializing test environment (attempt 1/3) ===

=== Test Environment Initialized Successfully ===

Recompiled test events file: c:/Users/ktw30/apps/word match phoenix/game_bot/test/support/test_events.ex
Protocol implementation module loaded: GameBot.Domain.Events.TestEvents.ValidatorTestEvent
Protocol implementation module loaded: GameBot.Domain.Events.TestEvents.ValidatorOptionalFieldsEvent
Running ExUnit with seed: 0, max_cases: 32
Excluding tags: [:skip_db, :skip_in_ci]



  1) test validate/1 validates valid events (GameBot.Infrastructure.Persistence.EventStore.Serialization.ValidatorTest)
     test/game_bot/infrastructure/persistence/event_store/serialization/validator_test.exs:11
     match (=) failed
     code:  assert :ok = Validator.validate(valid_guess_processed)
     left:  :ok
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :validation,
               context: GameBot.Infrastructure.Persistence.EventStore.Serialization.Validator,
               message: "Missing required fields: player1_duration, player2_duration",
               details: %GameBot.Domain.Events.GameEvents.GuessProcessed{
                 game_id: "game123",
                 guild_id: "guild456",
                 mode: :standard,
                 round_number: 1,
                 team_id: "team1",
                 player1_id: "playerbob",
                 player2_id: "playeralice",
                 player1_word: "apple",
                 player2_word: "banana",
                 guess_successful: true,
                 match_score: 10,
                 guess_count: 1,
                 round_guess_count: 1,
                 total_guesses: 5,
                 guess_duration: 30,
                 player1_duration: nil,
                 player2_duration: nil,
                 timestamp: ~U[2025-03-14 06:31:59.156000Z],
                 metadata: %{
                   correlation_id: "corr123",
                   source_id: "src123"
                 }
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/serialization/validator_test.exs:47: (test)



  2) test serialize/2 with validation serializes valid events (GameBot.Infrastructure.Persistence.EventStore.SerializerValidationTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:11
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not an atom

     code: assert {:ok, serialized} = Serializer.serialize(valid_event)
     stacktrace:
       :erlang.function_exported(%GameBot.Domain.Events.GameEvents.GameStarted{game_id: nil, guild_id: nil, mode: nil, timestamp: nil, metadata: nil, round_number: nil, teams: nil, team_ids: nil, player_ids: nil, config: nil, started_at: nil}, :event_type, 0)
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:317: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type_if_available/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:353: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:495: GameBot.Infrastructure.Persistence.EventStore.Serializer.extract_event_type_and_version/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:225: GameBot.Infrastructure.Persistence.EventStore.Serializer.do_serialize/2
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:75: GameBot.Infrastructure.Persistence.EventStore.Serializer.serialize/2
       test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:14: (test)



  3) test serialize/2 with validation allows bypassing validation (GameBot.Infrastructure.Persistence.EventStore.SerializerValidationTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:27
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not an atom

     code: assert {:ok, serialized} = Serializer.serialize(invalid_event, validate: false)
     stacktrace:
       :erlang.function_exported(%GameBot.Domain.Events.GameEvents.GameStarted{game_id: nil, guild_id: nil, mode: nil, timestamp: nil, metadata: nil, round_number: nil, teams: nil, team_ids: nil, player_ids: nil, config: nil, started_at: nil}, :event_type, 0)
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:317: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type_if_available/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:353: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:495: GameBot.Infrastructure.Persistence.EventStore.Serializer.extract_event_type_and_version/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:225: GameBot.Infrastructure.Persistence.EventStore.Serializer.do_serialize/2
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:75: GameBot.Infrastructure.Persistence.EventStore.Serializer.serialize/2
       test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:35: (test)



  4) test deserialize/3 with validation deserializes and validates valid events (GameBot.Infrastructure.Persistence.EventStore.SerializerValidationTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:41
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not an atom

     code: {:ok, serialized} = Serializer.serialize(valid_event, validate: false)
     stacktrace:
       :erlang.function_exported(%GameBot.Domain.Events.GameEvents.GameStarted{game_id: nil, guild_id: nil, mode: nil, timestamp: nil, metadata: nil, round_number: nil, teams: nil, team_ids: nil, player_ids: nil, config: nil, started_at: nil}, :event_type, 0)
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:317: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type_if_available/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:353: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:495: GameBot.Infrastructure.Persistence.EventStore.Serializer.extract_event_type_and_version/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:225: GameBot.Infrastructure.Persistence.EventStore.Serializer.do_serialize/2
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:75: GameBot.Infrastructure.Persistence.EventStore.Serializer.serialize/2
       test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:43: (test)



  5) test deserialize/3 with validation rejects deserializing to invalid events (GameBot.Infrastructure.Persistence.EventStore.SerializerValidationTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:62
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not an atom

     code: {:ok, serialized} = Serializer.serialize(valid_event, validate: false)
     stacktrace:
       :erlang.function_exported(%GameBot.Domain.Events.GameEvents.GameStarted{game_id: nil, guild_id: nil, mode: nil, timestamp: nil, metadata: nil, round_number: nil, teams: nil, team_ids: nil, player_ids: nil, config: nil, started_at: nil}, :event_type, 0)
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:317: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type_if_available/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:353: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:495: GameBot.Infrastructure.Persistence.EventStore.Serializer.extract_event_type_and_version/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:225: GameBot.Infrastructure.Persistence.EventStore.Serializer.do_serialize/2
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:75: GameBot.Infrastructure.Persistence.EventStore.Serializer.serialize/2
       test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:65: (test)



  6) test deserialize/3 with validation allows bypassing validation on deserialization (GameBot.Infrastructure.Persistence.EventStore.SerializerValidationTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:73
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not an atom

     code: {:ok, serialized} = Serializer.serialize(valid_event, validate: false)
     stacktrace:
       :erlang.function_exported(%GameBot.Domain.Events.GameEvents.GameStarted{game_id: nil, guild_id: nil, mode: nil, timestamp: nil, metadata: nil, round_number: nil, teams: nil, team_ids: nil, player_ids: nil, config: nil, started_at: nil}, :event_type, 0)
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:317: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type_if_available/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:353: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:495: GameBot.Infrastructure.Persistence.EventStore.Serializer.extract_event_type_and_version/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:225: GameBot.Infrastructure.Persistence.EventStore.Serializer.do_serialize/2
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:75: GameBot.Infrastructure.Persistence.EventStore.Serializer.serialize/2
       test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:75: (test)



  7) test end-to-end serialization with validation rejects invalid events in both directions (GameBot.Infrastructure.Persistence.EventStore.SerializerValidationTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:90
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not an atom

     code: {:ok, serialized} = Serializer.serialize(valid_event, validate: false)
     stacktrace:
       :erlang.function_exported(%GameBot.Domain.Events.GameEvents.GameStarted{game_id: nil, guild_id: nil, mode: nil, timestamp: nil, metadata: nil, round_number: nil, teams: nil, team_ids: nil, player_ids: nil, config: nil, started_at: nil}, :event_type, 0)
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:317: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type_if_available/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:353: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:495: GameBot.Infrastructure.Persistence.EventStore.Serializer.extract_event_type_and_version/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:225: GameBot.Infrastructure.Persistence.EventStore.Serializer.do_serialize/2
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:75: GameBot.Infrastructure.Persistence.EventStore.Serializer.serialize/2
       test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:99: (test)



  8) test end-to-end serialization with validation round-trip serialization preserves data integrity (GameBot.Infrastructure.Persistence.EventStore.SerializerValidationTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:105
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not an atom

     code: {:ok, serialized} = Serializer.serialize(original_event)
     stacktrace:
       :erlang.function_exported(%GameBot.Domain.Events.GameEvents.GameStarted{game_id: nil, guild_id: nil, mode: nil, timestamp: nil, metadata: nil, round_number: nil, teams: nil, team_ids: nil, player_ids: nil, config: nil, started_at: nil}, :event_type, 0)
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:317: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type_if_available/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:353: GameBot.Infrastructure.Persistence.EventStore.Serializer.get_event_type/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:495: GameBot.Infrastructure.Persistence.EventStore.Serializer.extract_event_type_and_version/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:225: GameBot.Infrastructure.Persistence.EventStore.Serializer.do_serialize/2
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:75: GameBot.Infrastructure.Persistence.EventStore.Serializer.serialize/2
       test/game_bot/infrastructure/persistence/event_store/serializer_validation_test.exs:108: (test)



  9) test GuessProcessed serializes and deserializes correctly (GameBot.Domain.Events.GameEventsTest)
     test/game_bot/domain/events/game_events_test.exs:200
     ** (KeyError) key :player1_id not found in: %GameBot.Domain.Events.TestEvents.TestEvent{
       game_id: "game-123",
       guild_id: "guild-123",
       mode: :two_player,
       timestamp: ~U[2025-03-14 06:31:59.278000Z],
       metadata: %{
         "correlation_id" => "corr-123",
         "guild_id" => "guild-123",
         "source_id" => "msg-123"
       },
       count: nil,
       score: nil,
       tags: MapSet.new([]),
       nested_data: nil,
       optional_field: nil,
       round_number: 1,
       teams: nil,
       team_ids: nil,
       player_ids: nil,
       player1_info: nil,
       player2_info: nil,
       player1_word: "word1",
       player2_word: "word2",
       guess_successful: true,
       match_score: 10,
       guess_count: 1,
       round_guess_count: 1,
       total_guesses: 1,
       guess_duration: 1000,
       config: nil,
       started_at: nil,
       roles: nil,
       team_id: "team1"
     }. Did you mean:

           * :player1_info
           * :player1_word
           * :player2_info
           * :player2_word
           * :player_ids

     code: assert reconstructed.player1_id == original.player1_id
     stacktrace:
       test/game_bot/domain/events/game_events_test.exs:210: (test)

Testing append_to_stream with test-stream-8642


 10) test basic operations with EventStore (GameBot.Infrastructure.Persistence.EventStore.SimpleTest)
     test/game_bot/infrastructure/persistence/event_store/simple_test.exs:23
     Failed to append to stream: %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected exception: key :__struct__ not found in: %{\n  data: %{test: \"data\"},\n  metadata: %{test: \"metadata\"},\n  event_type: \"test_event\",\n  stream_id: \"test-stream-8642\"\n}", details: %KeyError{key: :__struct__, term: %{data: %{test: "data"}, metadata: %{test: "metadata"}, event_type: "test_event", stream_id: "test-stream-8642"}, message: nil}, source: nil}
     code: assert_append_and_read(EventStore, stream_id, event)
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/simple_test.exs:36: (test)



 11) test adapter functions append_to_stream/4 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:40
     ** (FunctionClauseError) no function clause matching in GenServer.whereis/1

     The following arguments were given to GenServer.whereis/1:

         # 1
         "test-stream-326"

     Attempted function clauses (showing 6 out of 6):

         def whereis(pid) when -is_pid(pid)-
         def whereis(name) when -is_atom(name)-
         def whereis(-{:global, name}-)
         def whereis(-{:via, mod, name}-)
         def whereis(-{name, local}-) when -is_atom(name)- and -local == node()-
         def whereis(-{name, node} = server-) when -is_atom(name)- and -is_atom(node)-

     code: assert {:ok, 1} = Adapter.append_to_stream(stream_id, :no_stream, [event])
     stacktrace:
       (elixir 1.18.2) lib/gen_server.ex:1286: GenServer.whereis/1
       (elixir 1.18.2) lib/gen_server.ex:1119: GenServer.call/3
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:48: (test)



 12) test adapter functions read_stream_forward/4 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:51
     ** (FunctionClauseError) no function clause matching in GenServer.whereis/1

     The following arguments were given to GenServer.whereis/1:

         # 1
         "test-stream-390"

     Attempted function clauses (showing 6 out of 6):

         def whereis(pid) when -is_pid(pid)-
         def whereis(name) when -is_atom(name)-
         def whereis(-{:global, name}-)
         def whereis(-{:via, mod, name}-)
         def whereis(-{name, local}-) when -is_atom(name)- and -local == node()-
         def whereis(-{name, node} = server-) when -is_atom(name)- and -is_atom(node)-

     code: assert {:ok, 2} = Adapter.append_to_stream(stream_id, :no_stream, events)
     stacktrace:
       (elixir 1.18.2) lib/gen_server.ex:1286: GenServer.whereis/1
       (elixir 1.18.2) lib/gen_server.ex:1119: GenServer.call/3
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:62: (test)



 13) test adapter functions stream_version/2 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:69
     ** (UndefinedFunctionError) function GameBot.Test.EventStoreCore.stream_version/2 is undefined or private. Did you mean:

           * get_stream_version/1
           * get_stream_version/2
           * get_stream_version/3

     code: assert {:ok, 0} = Adapter.stream_version(stream_id)
     stacktrace:
       (game_bot 0.1.0) GameBot.Test.EventStoreCore.stream_version("test-stream-454", [])
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:77: (test)



 14) test adapter functions delete_stream/3 delegates to configured adapter (GameBot.Infrastructure.Persistence.EventStore.AdapterTest)
     test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:86
     ** (FunctionClauseError) no function clause matching in GenServer.whereis/1

     The following arguments were given to GenServer.whereis/1:

         # 1
         "test-stream-518"

     Attempted function clauses (showing 6 out of 6):

         def whereis(pid) when -is_pid(pid)-
         def whereis(name) when -is_atom(name)-
         def whereis(-{:global, name}-)
         def whereis(-{:via, mod, name}-)
         def whereis(-{name, local}-) when -is_atom(name)- and -local == node()-
         def whereis(-{name, node} = server-) when -is_atom(name)- and -is_atom(node)-

     code: assert {:ok, 1} = Adapter.append_to_stream(stream_id, :no_stream, [event])
     stacktrace:
       (elixir 1.18.2) lib/gen_server.ex:1286: GenServer.whereis/1
       (elixir 1.18.2) lib/gen_server.ex:1119: GenServer.call/3
       test/game_bot/infrastructure/persistence/event_store/adapter_test.exs:94: (test)



 15) test append and read stream operations work (GameBot.Infrastructure.Persistence.EventStore.MacroIntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:50
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected exception: key :__struct__ not found in: %{\n  data: %{test: \"data\"},\n  metadata: %{guild_id: \"test-guild-1\"},\n  event_type: \"test_event\",\n  stream_id: \"test-macro-integration-143\",\n  event_version: 1\n}", details: %KeyError{key: :__struct__, term: %{data: %{test: "data"}, metadata: %{guild_id: "test-guild-1"}, event_type: "test_event", stream_id: "test-macro-integration-143", event_version: 1}, message: nil}, source: nil}}
     code: {:ok, version} = EventStore.append_to_stream(stream_id, :no_stream, [event], [timeout: @db_timeout])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:55: (test)



 16) test stream_version returns correct version (GameBot.Infrastructure.Persistence.EventStore.MacroIntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:65
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected exception: key :__struct__ not found in: %{\n  data: %{test: \"version_test\"},\n  metadata: %{guild_id: \"test-guild-1\"},\n  event_type: \"test_event\",\n  stream_id: \"test-macro-integration-143\",\n  event_version: 1\n}", details: %KeyError{key: :__struct__, term: %{data: %{test: "version_test"}, metadata: %{guild_id: "test-guild-1"}, event_type: "test_event", stream_id: "test-macro-integration-143", event_version: 1}, message: nil}, source: nil}}
     code: {:ok, new_version} = EventStore.append_to_stream(stream_id, :no_stream, [event], [timeout: @db_timeout])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:74: (test)



 17) test delete_stream removes the stream (GameBot.Infrastructure.Persistence.EventStore.MacroIntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:82
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected exception: key :__struct__ not found in: %{\n  data: %{test: \"delete_test\"},\n  metadata: %{guild_id: \"test-guild-1\"},\n  event_type: \"test_event\",\n  stream_id: \"test-macro-integration-143\",\n  event_version: 1\n}", details: %KeyError{key: :__struct__, term: %{data: %{test: "delete_test"}, metadata: %{guild_id: "test-guild-1"}, event_type: "test_event", stream_id: "test-macro-integration-143", event_version: 1}, message: nil}, source: nil}}
     code: {:ok, version} = EventStore.append_to_stream(stream_id, :no_stream, [event], [timeout: @db_timeout])
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/macro_integration_test.exs:87: (test)

23:32:01.113 [warning] Event store is not running, cannot reset
23:32:01.115 [warning] Repository GameBot.Infrastructure.Persistence.Repo is not running, attempting to restart


 18) test GET / (GameBotWeb.PageControllerTest)
     test/game_bot_web/controllers/page_controller_test.exs:4
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: the table identifier does not refer to an existing ETS table

     code: conn = get(conn, ~p"/")
     stacktrace:
       (stdlib 6.2) :ets.lookup(GameBotWeb.Endpoint, :secret_key_base)
       (game_bot 0.1.0) deps/phoenix/lib/phoenix/endpoint.ex:529: GameBotWeb.Endpoint.config/2
       (game_bot 0.1.0) lib/game_bot_web/endpoint.ex:1: GameBotWeb.Endpoint.call/2
       (phoenix 1.7.20) lib/phoenix/test/conn_test.ex:225: Phoenix.ConnTest.dispatch/5
       test/game_bot_web/controllers/page_controller_test.exs:5: (test)

23:32:01.166 [warning] Repository GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres is not running, attempting to restart
23:32:01.218 [error] Exception during sandbox setup for GameBot.Infrastructure.Persistence.Repo: %CaseClauseError{term: {:already, :owner}}
23:32:01.218 [error] Exception during sandbox setup for GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres: %CaseClauseError{term: {:already, :owner}}
23:32:01.218 [error] Failed to set up sandbox for GameBot.Infrastructure.Persistence.Repo: {:exception, %CaseClauseError{term: {:already, :owner}}}
23:32:01.218 [error] Non-recoverable error during sandbox setup: {:sandbox_setup_failed, GameBot.Infrastructure.Persistence.Repo, {:exception, %CaseClauseError{term: {:already, :owner}}}}


 19) test sync tests event store operations (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:25
     ** (RuntimeError) could not lookup GameBot.Infrastructure.Persistence.EventStore because it was not started or it does not exist
     code: assert {:ok, _} = EventStore.append_to_stream(stream_id, :any_version, [event])
     stacktrace:
       (eventstore 1.4.8) lib/event_store/config/store.ex:65: EventStore.Config.Store.lookup/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.parse_opts/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.append_to_stream/4
       test/game_bot/test/database_manager_test.exs:29: (test)

23:32:01.222 [error] Exception during sandbox setup for GameBot.Infrastructure.Persistence.Repo: %CaseClauseError{term: {:already, :owner}}
23:32:01.222 [error] Exception during sandbox setup for GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres: %CaseClauseError{term: {:already, :owner}}
23:32:01.222 [error] Failed to set up sandbox for GameBot.Infrastructure.Persistence.Repo: {:exception, %CaseClauseError{term: {:already, :owner}}}
23:32:01.222 [error] Non-recoverable error during sandbox setup: {:sandbox_setup_failed, GameBot.Infrastructure.Persistence.Repo, {:exception, %CaseClauseError{term: {:already, :owner}}}}
23:32:01.224 [error] Exception during sandbox setup for GameBot.Infrastructure.Persistence.Repo: %CaseClauseError{term: {:already, :owner}}
23:32:01.224 [error] Exception during sandbox setup for GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres: %CaseClauseError{term: {:already, :owner}}
23:32:01.224 [error] Failed to set up sandbox for GameBot.Infrastructure.Persistence.Repo: {:exception, %CaseClauseError{term: {:already, :owner}}}
23:32:01.224 [error] Non-recoverable error during sandbox setup: {:sandbox_setup_failed, GameBot.Infrastructure.Persistence.Repo, {:exception, %CaseClauseError{term: {:already, :owner}}}}


 20) test sync tests handles database errors gracefully (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:34
     ** (Postgrex.Error) ERROR 42883 (undefined_function) function invalid_function() does not exist

         query: SELECT invalid_function()

         hint: No function matches the given name and argument types. You might need to add explicit type casts.
     code: assert {:error, _} = Repo.transaction(fn ->
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1096: Ecto.Adapters.SQL.raise_sql_call_error/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1400: anonymous fn/3 in Ecto.Adapters.SQL.checkout_or_transaction/4
       (db_connection 2.7.0) lib/db_connection.ex:1756: DBConnection.run_transaction/4
       test/game_bot/test/database_manager_test.exs:35: (test)

23:32:01.224 [error] Exception during sandbox setup for GameBot.Infrastructure.Persistence.Repo: %CaseClauseError{term: {:already, :owner}}
23:32:01.224 [error] Exception during sandbox setup for GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres: %CaseClauseError{term: {:already, :owner}}
23:32:01.224 [error] Failed to set up sandbox for GameBot.Infrastructure.Persistence.Repo: {:exception, %CaseClauseError{term: {:already, :owner}}}
23:32:01.224 [error] Non-recoverable error during sandbox setup: {:sandbox_setup_failed, GameBot.Infrastructure.Persistence.Repo, {:exception, %CaseClauseError{term: {:already, :owner}}}}


 21) test async tests concurrent event store operations (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:54
     ** (RuntimeError) could not lookup GameBot.Infrastructure.Persistence.EventStore because it was not started or it does not exist
     code: assert {:ok, _} = EventStore.append_to_stream(stream_id, :any_version, [event])
     stacktrace:
       (eventstore 1.4.8) lib/event_store/config/store.ex:65: EventStore.Config.Store.lookup/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.parse_opts/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.append_to_stream/4
       test/game_bot/test/database_manager_test.exs:58: (test)



 22) test error handling handles transaction failures (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:159
     ** (Postgrex.Error) ERROR 42P01 (undefined_table) relation "nonexistent_table" does not exist

         query: SELECT * FROM nonexistent_table
     code: assert {:error, _} = Repo.transaction(fn ->
     stacktrace:
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1096: Ecto.Adapters.SQL.raise_sql_call_error/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1400: anonymous fn/3 in Ecto.Adapters.SQL.checkout_or_transaction/4
       (db_connection 2.7.0) lib/db_connection.ex:1756: DBConnection.run_transaction/4
       test/game_bot/test/database_manager_test.exs:160: (test)

23:32:01.227 [error] Exception during sandbox setup for GameBot.Infrastructure.Persistence.Repo: %CaseClauseError{term: {:already, :owner}}
23:32:01.227 [error] Exception during sandbox setup for GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres: %CaseClauseError{term: {:already, :owner}}
23:32:01.227 [error] Failed to set up sandbox for GameBot.Infrastructure.Persistence.Repo: {:exception, %CaseClauseError{term: {:already, :owner}}}
23:32:01.227 [error] Non-recoverable error during sandbox setup: {:sandbox_setup_failed, GameBot.Infrastructure.Persistence.Repo, {:exception, %CaseClauseError{term: {:already, :owner}}}}


 23) test error handling handles event store errors (GameBot.Test.DatabaseManagerTest)
     test/game_bot/test/database_manager_test.exs:165
     ** (RuntimeError) could not lookup GameBot.Infrastructure.Persistence.EventStore because it was not started or it does not exist
     code: EventStore.read_stream_forward("nonexistent-stream")
     stacktrace:
       (eventstore 1.4.8) lib/event_store/config/store.ex:65: EventStore.Config.Store.lookup/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.parse_opts/1
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store.ex:7: GameBot.Infrastructure.Persistence.EventStore.read_stream_forward/4
       test/game_bot/test/database_manager_test.exs:168: (test)

23:32:02.551 [warning] Event store is not running, cannot reset


 24) test store_replay/1 stores a replay successfully (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:63
     ** (KeyError) key :replay_id not found in: {:ok,
      %{
        mode: :two_player,
        start_time: ~U[2025-03-14 05:32:02.291000Z],
        created_at: ~U[2025-03-14 06:32:02.294000Z],
        game_id: "test-game-1860",
        replay_id: "cdf0714c-8adb-47a4-aab1-5cdf8d63cafd",
        display_name: "test-replay-123",
        end_time: ~U[2025-03-14 06:32:02.294000Z],
        event_count: 42,
        base_stats: %{
          total_guesses: 75,
          rounds: 10,
          duration_seconds: 3600,
          player_count: 2,
          team_count: 2
        },
        mode_stats: %{
          successful_guesses: 50,
          failed_guesses: 25,
          team_scores: %{"team1" => 30, "team2" => 20},
          winning_team: "team1",
          average_guess_time: 15.5
        },
        version_map: %{"game_completed" => 1, "game_started" => 1}
      }}

     If you are using the dot syntax, such as map.field, make sure the left-hand side of the dot is a map
     code: assert stored_replay.replay_id == replay.replay_id
     stacktrace:
       test/game_bot/replay/storage_test.exs:76: (test)

23:32:03.172 [error] Failed to store replay: [display_name: {"has already been taken", []}]
23:32:03.529 [warning] Event store is not running, cannot reset


 25) test store_replay/1 handles insert errors (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:82
     match (=) failed
     code:  assert {:error, %Ecto.Changeset{} = error_changeset} = result
     left:  {:error, %Ecto.Changeset{} = error_changeset}
     right: {:ok,
             {:error,
              #Ecto.Changeset<
                action: nil,
                changes: %{},
                errors: [
                  display_name: {"has already been taken", []}
                ],
                data: nil,
                valid?: false,
                ...
              >}}
     stacktrace:
       test/game_bot/replay/storage_test.exs:97: (test)

23:32:04.335 [warning] Event store is not running, cannot reset


 26) test get_replay/2 retrieves a replay with events (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:138
     ** (ErlangError) Erlang error: {:not_mocked, GameBot.Replay.EventStoreAccess}
     stacktrace:
       (meck 0.9.2) c:/Users/ktw30/apps/word match phoenix/game_bot/deps/meck/src/meck_proc.erl:491: :meck_proc.gen_server/3
       (meck 0.9.2) c:/Users/ktw30/apps/word match phoenix/game_bot/deps/meck/src/meck.erl:484: :meck.unload/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

23:32:04.870 [error] Failed to load events for replay 81ab887b-83ea-4556-bac9-f667abe562c9: :stream_not_found
23:32:05.259 [warning] Event store is not running, cannot reset


 27) test get_replay/2 handles event loading errors (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:177
     ** (ErlangError) Erlang error: {:not_mocked, GameBot.Replay.EventStoreAccess}
     stacktrace:
       (meck 0.9.2) c:/Users/ktw30/apps/word match phoenix/game_bot/deps/meck/src/meck_proc.erl:491: :meck_proc.gen_server/3
       (meck 0.9.2) c:/Users/ktw30/apps/word match phoenix/game_bot/deps/meck/src/meck.erl:484: :meck.unload/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

23:32:06.004 [warning] Event store is not running, cannot reset


 28) test list_replays/1 lists replays with default params (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:219
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not a list

     code: assert length(list) == 2
     stacktrace:
       :erlang.length({:ok, []})
       test/game_bot/replay/storage_test.exs:239: (test)

23:32:06.868 [warning] Event store is not running, cannot reset


 29) test list_replays/1 lists replays with filters (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:243
     ** (ArgumentError) errors were found at the given arguments:

       * 1st argument: not a list

     code: assert length(list) == 1
     stacktrace:
       :erlang.length({:ok, []})
       test/game_bot/replay/storage_test.exs:264: (test)

23:32:07.612 [warning] Event store is not running, cannot reset


 30) test list_replays/1 returns empty list when no replays match filters (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:269
     Assertion with == failed
     code:  assert list == []
     left:  {:ok, []}
     right: []
     stacktrace:
       test/game_bot/replay/storage_test.exs:283: (test)

23:32:08.358 [warning] Event store is not running, cannot reset


 31) test log_access/6 returns error on failed insert (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:310
     match (=) failed
     code:  assert {:error, changeset} = result
     left:  {:error, changeset}
     right: :ok
     stacktrace:
       test/game_bot/replay/storage_test.exs:324: (test)

23:32:09.220 [warning] Event store is not running, cannot reset


 32) test cleanup_old_replays/1 deletes old replays (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:331
     Assertion with == failed
     code:  assert count == 5
     left:  {:ok, 0}
     right: 5
     stacktrace:
       test/game_bot/replay/storage_test.exs:347: (test)

23:32:09.958 [warning] Event store is not running, cannot reset


 33) test cleanup_old_replays/1 handles delete errors (GameBot.Replay.StorageTest)
     test/game_bot/replay/storage_test.exs:351
     match (=) failed
     code:  assert {:error, "database error"} = result
     left:  {:error, "database error"}
     right: {:ok, {:ok, 0}}
     stacktrace:
       test/game_bot/replay/storage_test.exs:366: (test)

23:32:10.898 [warning] Event store is not running, cannot reset


 34) test event store and repository interaction event store and repository interaction rolls back both event store and repository on error (GameBot.Infrastructure.Persistence.IntegrationTest)
     test/game_bot/infrastructure/persistence/integration_test.exs:136
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1136.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo, ownership_timeout: 60000, queue_target: 5000, queue_interval: 5000, timeout: 30000, pool_size: 1])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/integration_test.exs:125: anonymous fn/0 in GameBot.Infrastructure.Persistence.IntegrationTest.__ex_unit_setup_1/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

     The following output was logged:
     23:32:10.574 [error] Failed to start TestEventStore: {:error, {:already_started, #PID<0.730.0>}}
     


 35) test serialize/1 successfully serializes valid event (GameBot.Infrastructure.Persistence.EventStore.SerializerTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:50
     match (=) failed
     code:  assert {:ok, serialized} = Serializer.serialize(event)
     left:  {:ok, serialized}
     right: {:error,
             %GameBot.Infrastructure.Persistence.Error{
               type: :validation,
               context: nil,
               message: nil,
               details: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:61: (test)



 36) test serialize/1 returns error for invalid event structure (GameBot.Infrastructure.Persistence.EventStore.SerializerTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:70
     ** (KeyError) key :__struct__ not found in: %{invalid: "structure"}
     code: assert {:error, %Error{type: :validation}} = Serializer.serialize(%{invalid: "structure"})
     stacktrace:
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:225: GameBot.Infrastructure.Persistence.EventStore.Serializer.do_serialize/2
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/serializer.ex:75: GameBot.Infrastructure.Persistence.EventStore.Serializer.serialize/2
       test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:71: (test)



 37) test deserialize/1 successfully deserializes valid event data (GameBot.Infrastructure.Persistence.EventStore.SerializerTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:76
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}}
     code: {:ok, serialized} = Serializer.serialize(event)
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:87: (test)



 38) test Serializer serializes and deserializes TestEvent correctly (GameBot.Infrastructure.Persistence.EventStore.SerializerTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:148
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}}
     code: {:ok, serialized} = Serializer.serialize(event)
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:160: (test)



 39) test Serializer handles missing type or version fields (GameBot.Infrastructure.Persistence.EventStore.SerializerTest)
     test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:202
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}}
     code: {:ok, serialized} = Serializer.serialize(event)
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/serializer_test.exs:215: (test)

23:32:11.532 [warning] Exit when stopping GameBot.Infrastructure.Persistence.Repo: {{:shutdown, {:sys, :terminate, [#PID<0.1167.0>, :normal, 5000]}}, {GenServer, :stop, [GameBot.Infrastructure.Persistence.Repo, :normal, 5000]}}
23:32:11.961 [warning] Event store is not running, cannot reset


 40) test execute_transaction/1 successfully executes transaction (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:44
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2

23:32:12.591 [warning] Exit when stopping GameBot.Infrastructure.Persistence.Repo: {{:shutdown, {:sys, :terminate, [#PID<0.1187.0>, :normal, 5000]}}, {GenServer, :stop, [GameBot.Infrastructure.Persistence.Repo, :normal, 5000]}}
23:32:13.023 [warning] Event store is not running, cannot reset


 41) test execute_transaction/1 rolls back on error (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:53
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2

23:32:14.077 [warning] Event store is not running, cannot reset


 42) test execute_transaction/1 handles nested transactions (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:64
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2

23:32:15.023 [warning] Event store is not running, cannot reset


 43) test insert_record/2 successfully inserts valid record (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:77
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2

23:32:15.534 [warning] Exit when stopping GameBot.Infrastructure.Persistence.Repo: {{:shutdown, {:sys, :terminate, [#PID<0.1247.0>, :normal, 5000]}}, {GenServer, :stop, [GameBot.Infrastructure.Persistence.Repo, :normal, 5000]}}
23:32:15.843 [warning] Event store is not running, cannot reset


 44) test insert_record/2 handles validation errors (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:83
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2

23:32:16.353 [warning] Exit when stopping GameBot.Infrastructure.Persistence.Repo: {{:shutdown, {:sys, :terminate, [#PID<0.1267.0>, :normal, 5000]}}, {GenServer, :stop, [GameBot.Infrastructure.Persistence.Repo, :normal, 5000]}}
23:32:16.664 [warning] Event store is not running, cannot reset


 45) test insert_record/2 handles constraint violations (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:88
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2

23:32:17.596 [warning] Event store is not running, cannot reset


 46) test update_record/2 successfully updates record (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:96
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2

23:32:18.106 [warning] Exit when stopping GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres: {{:shutdown, {:sys, :terminate, [#PID<0.1312.0>, :normal, 5000]}}, {GenServer, :stop, [GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, :normal, 5000]}}
23:32:18.428 [warning] Event store is not running, cannot reset


 47) test update_record/2 handles concurrent modifications (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:105
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2

23:32:19.035 [warning] Exit when stopping GameBot.Infrastructure.Persistence.Repo: {{:shutdown, {:sys, :terminate, [#PID<0.1327.0>, :normal, 5000]}}, {GenServer, :stop, [GameBot.Infrastructure.Persistence.Repo, :normal, 5000]}}
23:32:19.454 [warning] Event store is not running, cannot reset


 48) test delete_record/2 successfully deletes record (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:116
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2

23:32:20.512 [warning] Event store is not running, cannot reset


 49) test delete_record/2 handles concurrent deletions (GameBot.Infrastructure.Persistence.Repo.PostgresTest)
     test/game_bot/infrastructure/persistence/repo/postgres_test.exs:122
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:28: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit_setup_1/1
       test/game_bot/infrastructure/persistence/repo/postgres_test.exs:1: GameBot.Infrastructure.Persistence.Repo.PostgresTest.__ex_unit__/2

???????????

 49) GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest: failure on setup_all callback, all tests have been invalidated
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:631: Ecto.Adapters.SQL.Sandbox.lookup_meta!/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql/sandbox.ex:536: Ecto.Adapters.SQL.Sandbox.checkout/2
       (game_bot 0.1.0) test/support/event_store_case.ex:189: GameBot.EventStoreCase.ensure_event_store_schema/0
       (game_bot 0.1.0) test/support/event_store_case.ex:41: GameBot.EventStoreCase.__ex_unit_setup_all_0/1
       (game_bot 0.1.0) test/support/event_store_case.ex:1: GameBot.EventStoreCase.__ex_unit__/2
       test/game_bot/infrastructure/persistence/event_store/adapter/postgres_test.exs:1: GameBot.Infrastructure.Persistence.EventStore.Adapter.PostgresTest.__ex_unit__/2



 50) test append_to_stream/4 successfully appends events (GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:122
     match (=) failed
     code:  assert {:ok, 1} = TestAdapter.append_to_stream("success", 0, [event])
     left:  {:ok, 1}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest.TestAdapter,
               message: "Unexpected error",
               details: %GameBot.Infrastructure.Persistence.Error{
                 type: :validation,
                 context: nil,
                 message: nil,
                 details: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:124: (test)



 51) test append_to_stream/4 retries on transient errors (GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:127
     match (=) failed
     code:  assert {:ok, 1} = TestAdapter.append_to_stream("retry", 0, [event])
     left:  {:ok, 1}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest.TestAdapter,
               message: "Unexpected error",
               details: %GameBot.Infrastructure.Persistence.Error{
                 type: :validation,
                 context: nil,
                 message: nil,
                 details: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:129: (test)



 52) test append_to_stream/4 returns error on permanent failure (GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:133
     match (=) failed
     code:  assert {:error, %Error{type: :validation}} = TestAdapter.append_to_stream("error", 0, [event])
     left:  {:error, %GameBot.Infrastructure.Error{type: :validation}}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest.TestAdapter,
               message: "Unexpected error",
               details: %GameBot.Infrastructure.Persistence.Error{
                 type: :validation,
                 context: nil,
                 message: nil,
                 details: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:135: (test)



 53) test read_stream_forward/4 successfully reads events (GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:140
     match (=) failed
     code:  assert {:ok, events} = TestAdapter.read_stream_forward("success", 0, 2)
     left:  {:ok, events}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest.TestAdapter,
               message: "Unexpected exception: function GameBot.Domain.Events.EventRegistry.get_module/2 is undefined or private",
               details: %UndefinedFunctionError{
                 module: GameBot.Domain.Events.EventRegistry,
                 function: :get_module,
                 arity: 2,
                 reason: nil,
                 message: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:141: (test)



 54) test read_stream_forward/4 retries on transient errors (GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:145
     match (=) failed
     code:  assert {:ok, [_event]} = TestAdapter.read_stream_forward("retry", 0, 1)
     left:  {:ok, [_event]}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest.TestAdapter,
               message: "Unexpected exception: function GameBot.Domain.Events.EventRegistry.get_module/2 is undefined or private",
               details: %UndefinedFunctionError{
                 module: GameBot.Domain.Events.EventRegistry,
                 function: :get_module,
                 arity: 2,
                 reason: nil,
                 message: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:146: (test)



 55) test telemetry emits telemetry events for successful operations (GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:173
     Assertion failed, no matching message after 0ms
     Showing 1 of 1 message in the mailbox
     code: assert_received {:telemetry, [:game_bot, :event_store, :append], %{duration: _},
            %{
              operation: :append,
              stream_id: "success",
              result: :ok,
              error: nil,
              metadata: %{adapter: TestAdapter}
            }}
     mailbox:
       pattern: {:telemetry, [:game_bot, :event_store, :append], %{duration: _},
                 %{
                   operation: :append,
                   stream_id: "success",
                   result: :ok,
                   error: nil,
                   metadata: %{
                     adapter: GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest.TestAdapter
                   }
                 }}
       value:   {:telemetry, [:game_bot, :event_store, :append], %{duration: 0},
                 %{
                   error: %GameBot.Infrastructure.Error{
                     type: :system,
                     context: GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest.TestAdapter,
                     message: "Unexpected error",
                     details: %GameBot.Infrastructure.Persistence.Error{
                       type: :validation,
                       context: nil,
                       message: nil,
                       details: nil
                     },
                     source: nil
                   },
                   metadata: %{
                     adapter: GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest.TestAdapter
                   },
                   result: :error,
                   start_time: -5764607252099072,
                   stream_id: "success",
                   operation: :append,
                   end_time: -5764607252099072
                 }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:181: (test)



 56) test telemetry emits telemetry events for failed operations (GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest)
     test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:191
     Assertion failed, no matching message after 0ms
     Showing 1 of 1 message in the mailbox
     code: assert_received {:telemetry, [:game_bot, :event_store, :append], %{duration: _},
            %{
              operation: :append,
              stream_id: "error",
              result: :error,
              error: %Error{type: :validation},
              metadata: %{adapter: TestAdapter}
            }}
     mailbox:
       pattern: {:telemetry, [:game_bot, :event_store, :append], %{duration: _},
                 %{
                   operation: :append,
                   stream_id: "error",
                   result: :error,
                   error: %GameBot.Infrastructure.Error{type: :validation},
                   metadata: %{
                     adapter: GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest.TestAdapter
                   }
                 }}
       value:   {:telemetry, [:game_bot, :event_store, :append], %{duration: 0},
                 %{
                   error: %GameBot.Infrastructure.Error{
                     type: :system,
                     context: GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest.TestAdapter,
                     message: "Unexpected error",
                     details: %GameBot.Infrastructure.Persistence.Error{
                       type: :validation,
                       context: nil,
                       message: nil,
                       details: nil
                     },
                     source: nil
                   },
                   metadata: %{
                     adapter: GameBot.Infrastructure.Persistence.EventStore.Adapter.BaseTest.TestAdapter
                   },
                   result: :error,
                   start_time: -5764607246985216,
                   stream_id: "error",
                   operation: :append,
                   end_time: -5764607246985216
                 }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/adapter/base_test.exs:199: (test)



 57) test stream operations append and read events (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:209
     match (=) failed
     code:  assert {:ok, _} = impl.append_to_stream(stream_id, 0, events, timeout: @db_timeout)
     left:  {:ok, _}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres,
               message: "Unexpected error",
               details: %GameBot.Infrastructure.Persistence.Error{
                 type: :validation,
                 context: nil,
                 message: nil,
                 details: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:219: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test stream operations append and read events"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:215: (test)



 58) test stream operations stream versioning (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:230
     match (=) failed
     code:  assert {:ok, _} = impl.append_to_stream(stream_id, 0, [event1])
     left:  {:ok, _}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres,
               message: "Unexpected error",
               details: %GameBot.Infrastructure.Persistence.Error{
                 type: :validation,
                 context: nil,
                 message: nil,
                 details: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:238: anonymous fn/4 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test stream operations stream versioning"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:234: (test)



 59) test stream operations concurrent operations (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:249
     Assertion with == failed
     code:  assert Enum.count(results, &match?({:ok, _}, &1)) == 1
     left:  0
     right: 1
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:259: anonymous fn/2 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test stream operations concurrent operations"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:250: (test)



 60) test subscription handling subscribe to stream (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:270
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected exception: could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist", details: %RuntimeError{message: "could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist"}, source: nil}}
     code: for {impl, name} <- @implementations do
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:169: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.with_subscription_local/4
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:277: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test subscription handling subscribe to stream"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:273: (test)



 61) test subscription handling multiple subscribers (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:289
     ** (MatchError) no match of right hand side value: {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected exception: could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist", details: %RuntimeError{message: "could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist"}, source: nil}}
     code: for {impl, name} <- @implementations do
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:169: GameBot.Infrastructure.Persistence.EventStore.IntegrationTest.with_subscription_local/4
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:297: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test subscription handling multiple subscribers"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:292: (test)



 62) test error handling transaction boundaries (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:327
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres because it was not started or it does not exist
     code: for {impl, name} <- @implementations do
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto 3.12.5) lib/ecto/repo/supervisor.ex:176: Ecto.Repo.Supervisor.tuplet/2
       (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/event_store/adapter/postgres.ex:34: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres.transaction/2
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:333: anonymous fn/2 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test error handling transaction boundaries"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:328: (test)



 63) test performance characteristics batch operations (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:357
     ** (MatchError) no match of right hand side value: {0, {:error, %GameBot.Infrastructure.Error{type: :system, context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres, message: "Unexpected error", details: %GameBot.Infrastructure.Persistence.Error{type: :validation, context: nil, message: nil, details: nil}, source: nil}}}
     code: for {impl, name} <- @implementations do
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:364: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test performance characteristics batch operations"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:360: (test)



 64) test performance characteristics concurrent read performance (GameBot.Infrastructure.Persistence.EventStore.IntegrationTest)
     test/game_bot/infrastructure/persistence/event_store/integration_test.exs:388
     match (=) failed
     code:  assert {:ok, _} = impl.append_to_stream(stream_id, 0, events)
     left:  {:ok, _}
     right: {:error,
             %GameBot.Infrastructure.Error{
               type: :system,
               context: GameBot.Infrastructure.Persistence.EventStore.Adapter.Postgres,
               message: "Unexpected error",
               details: %GameBot.Infrastructure.Persistence.Error{
                 type: :validation,
                 context: nil,
                 message: nil,
                 details: nil
               },
               source: nil
             }}
     stacktrace:
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:395: anonymous fn/3 in GameBot.Infrastructure.Persistence.EventStore.IntegrationTest."test performance characteristics concurrent read performance"/1
       (elixir 1.18.2) lib/enum.ex:2546: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/game_bot/infrastructure/persistence/event_store/integration_test.exs:391: (test)

Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
23:32:23.988 [info] Cleaning up test environment
23:32:23.988 [info] Performing graceful shutdown of database connections
23:32:24.604 [warning] Event store is not running, cannot reset
23:32:24.604 [info] Test environment cleanup completed
23:32:24.604 [info] Performing graceful shutdown of database connections


 65) test transaction boundaries commits all changes on success (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:123
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
23:32:25.365 [info] Cleaning up test environment
23:32:25.365 [info] Performing graceful shutdown of database connections
23:32:26.174 [warning] Event store is not running, cannot reset
23:32:26.174 [info] Test environment cleanup completed
23:32:26.174 [info] Performing graceful shutdown of database connections


 66) test transaction boundaries rolls back all changes on error (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:139
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1509.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) shutdown
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
23:32:26.915 [info] Cleaning up test environment
23:32:26.915 [info] Performing graceful shutdown of database connections
23:32:27.654 [warning] Event store is not running, cannot reset
23:32:27.654 [info] Test environment cleanup completed
23:32:27.654 [info] Performing graceful shutdown of database connections


 67) test transaction boundaries handles exceptions by rolling back (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:154
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
23:32:28.402 [error] Postgrex.Protocol (#PID<0.1583.0>) disconnected: ** (DBConnection.ConnectionError) client #PID<0.1563.0> timed out because it queued and checked out the connection for longer than 10ms

Client #PID<0.1563.0> is still using a connection from owner at location:

    (elixir 1.18.2) lib/process.ex:317: Process.sleep/1
    test/game_bot/infrastructure/persistence/repo/transaction_test.exs:174: anonymous fn/2 in GameBot.Infrastructure.Persistence.Repo.TransactionTest."test transaction boundaries respects timeout settings"/1
    (elixir 1.18.2) lib/enum.ex:4503: Enum.reduce/3
    test/game_bot/infrastructure/persistence/repo/transaction_test.exs:173: anonymous fn/0 in GameBot.Infrastructure.Persistence.Repo.TransactionTest."test transaction boundaries respects timeout settings"/1
    (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/repo/postgres.ex:142: anonymous fn/1 in GameBot.Infrastructure.Persistence.Repo.Postgres.execute_transaction/2
    (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:1400: anonymous fn/3 in Ecto.Adapters.SQL.checkout_or_transaction/4
    (db_connection 2.7.0) lib/db_connection.ex:1756: DBConnection.run_transaction/4
    (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/repo/postgres.ex:140: anonymous fn/2 in GameBot.Infrastructure.Persistence.Repo.Postgres.execute_transaction/2
    (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/repo/postgres.ex:176: GameBot.Infrastructure.Persistence.Repo.Postgres.with_retry/2
    test/game_bot/infrastructure/persistence/repo/transaction_test.exs:169: GameBot.Infrastructure.Persistence.Repo.TransactionTest."test transaction boundaries respects timeout settings"/1
    (ex_unit 1.18.2) lib/ex_unit/runner.ex:511: ExUnit.Runner.exec_test/2
    (stdlib 6.2) timer.erl:595: :timer.tc/2
    (ex_unit 1.18.2) lib/ex_unit/runner.ex:433: anonymous fn/6 in ExUnit.Runner.spawn_test_monitor/4

The connection itself was checked out by #PID<0.1563.0> at location:

    (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/repo/postgres.ex:140: anonymous fn/2 in GameBot.Infrastructure.Persistence.Repo.Postgres.execute_transaction/2
    (game_bot 0.1.0) lib/game_bot/infrastructure/persistence/repo/postgres.ex:176: GameBot.Infrastructure.Persistence.Repo.Postgres.with_retry/2
    test/game_bot/infrastructure/persistence/repo/transaction_test.exs:169: GameBot.Infrastructure.Persistence.Repo.TransactionTest."test transaction boundaries respects timeout settings"/1
    (ex_unit 1.18.2) lib/ex_unit/runner.ex:511: ExUnit.Runner.exec_test/2
    (stdlib 6.2) timer.erl:595: :timer.tc/2
    (ex_unit 1.18.2) lib/ex_unit/runner.ex:433: anonymous fn/6 in ExUnit.Runner.spawn_test_monitor/4


23:32:28.465 [info] Cleaning up test environment
23:32:28.465 [info] Performing graceful shutdown of database connections
23:32:29.080 [warning] Event store is not running, cannot reset
23:32:29.080 [info] Test environment cleanup completed
23:32:29.080 [info] Performing graceful shutdown of database connections


 68) test transaction boundaries respects timeout settings (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:167
     ** (RuntimeError) could not lookup Ecto repo GameBot.Infrastructure.Persistence.Repo.Postgres because it was not started or it does not exist
     stacktrace:
       (ecto 3.12.5) lib/ecto/repo/registry.ex:22: Ecto.Repo.Registry.lookup/1
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:592: Ecto.Adapters.SQL.query/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
Runtime repository implementation: GameBot.Infrastructure.Persistence.Repo.Postgres
23:32:29.726 [info] Cleaning up test environment
23:32:29.726 [info] Performing graceful shutdown of database connections
23:32:30.579 [warning] Event store is not running, cannot reset
23:32:30.579 [info] Test environment cleanup completed
23:32:30.579 [info] Performing graceful shutdown of database connections


 69) test transaction boundaries supports nested transactions (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:191
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1616.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

23:32:31.212 [info] Cleaning up test environment
23:32:31.212 [info] Performing graceful shutdown of database connections
23:32:31.972 [warning] Event store is not running, cannot reset


23:32:31.972 [info] Test environment cleanup completed
 70) test execute/3 logs guild context when provided (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:213
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1651.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

23:32:31.972 [info] Performing graceful shutdown of database connections
23:32:32.638 [info] Cleaning up test environment
23:32:32.638 [info] Performing graceful shutdown of database connections
23:32:33.687 [warning] Event store is not running, cannot reset
23:32:33.687 [info] Test environment cleanup completed
23:32:33.687 [info] Performing graceful shutdown of database connections


 71) test execute/3 logs without guild context when not provided (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:227
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1693.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

23:32:34.321 [info] Cleaning up test environment
23:32:34.321 [info] Performing graceful shutdown of database connections
23:32:35.185 [warning] Event store is not running, cannot reset
23:32:35.185 [info] Test environment cleanup completed
23:32:35.185 [info] Performing graceful shutdown of database connections


 72) test execute/3 adds guild_id to error context on failure (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:240
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1735.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

23:32:35.806 [info] Cleaning up test environment
23:32:35.806 [info] Performing graceful shutdown of database connections
23:32:36.521 [warning] Event store is not running, cannot reset
23:32:36.521 [info] Test environment cleanup completed
23:32:36.521 [info] Performing graceful shutdown of database connections


 73) test execute_steps/3 executes multiple steps with guild context (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:258
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1777.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) shutdown
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0

23:32:37.156 [info] Cleaning up test environment
23:32:37.156 [info] Performing graceful shutdown of database connections
23:32:37.900 [warning] Event store is not running, cannot reset
23:32:37.900 [info] Test environment cleanup completed


 74) test execute_steps/3 stops execution on first error (GameBot.Infrastructure.Persistence.Repo.TransactionTest)
     test/game_bot/infrastructure/persistence/repo/transaction_test.exs:278
     ** (exit) exited in: DBConnection.Holder.checkout(#PID<0.1820.0>, [log: #Function<13.132594008/1 in Ecto.Adapters.SQL.with_log/3>, pool: DBConnection.Ownership, repo: GameBot.Infrastructure.Persistence.Repo.Postgres, pool_size: 10, ownership_timeout: 60000, queue_target: 200, queue_interval: 1000, timeout: 30000])
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     stacktrace:
       (db_connection 2.7.0) lib/db_connection/holder.ex:97: DBConnection.Holder.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1326: DBConnection.checkout/3
       (db_connection 2.7.0) lib/db_connection.ex:1651: DBConnection.run/6
       (db_connection 2.7.0) lib/db_connection.ex:772: DBConnection.parsed_prepare_execute/5
       (db_connection 2.7.0) lib/db_connection.ex:764: DBConnection.prepare_execute/4
       (postgrex 0.20.0) lib/postgrex.ex:317: Postgrex.query_prepare_execute/4
       (ecto_sql 3.12.1) lib/ecto/adapters/sql.ex:547: Ecto.Adapters.SQL.query!/4
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:136: ExUnit.OnExitHandler.exec_callback/1
       (ex_unit 1.18.2) lib/ex_unit/on_exit_handler.ex:122: ExUnit.OnExitHandler.on_exit_runner_loop/0


Finished in 38.9 seconds (0.4s async, 38.5s sync)
85 tests, 74 failures, 11 invalid
23:32:37.902 [info] Cleaning up test environment
23:32:37.902 [info] Performing graceful shutdown of database connections
23:32:38.258 [warning] Event store is not running, cannot reset

=== Cleaning up after test suite ===
23:32:38.258 [info] Test environment cleanup completed
23:32:38.990 [info] Successfully created database game_bot_test
23:32:39.246 [info] Successfully created database game_bot_eventstore_test
=== Test suite cleanup complete ===

23:32:39.246 [info] Successfully set up test databases
